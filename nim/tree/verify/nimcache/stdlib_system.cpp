/* Generated by Nim Compiler v0.13.0 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c  -w -w -fpermissive -O3 -fno-strict-aliasing  -I/home/chaemon/.choosenim/toolchains/nim-0.13.0/lib -o /home/chaemon/git/library-1/nim/tree/verify/nimcache/stdlib_system.o /home/chaemon/git/library-1/nim/tree/verify/nimcache/stdlib_system.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include <string.h>
#include <sys/mman.h>
#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <signal.h>
struct Exception;
struct TNimType;
struct TNimNode;
struct Avlnode29486;
struct Gcheap49618;
struct Gcstack49616;
struct Cellseq47322;
struct Cell47306;
struct Cellset47318;
struct Pagedesc47314;
struct Memregion29488;
struct Smallchunk29440;
struct Llchunk29482;
struct Bigchunk29442;
struct Intset29414;
struct Trunk29410;
struct Gcstat49614;
struct Basechunk29438;
struct Freecell29430;
struct TGenericSeq;
struct NimStringDesc;
struct TSafePoint;
struct Graph159415;
struct TY159416;
struct Edge159419;
struct Overflowerror3640;
struct Arithmeticerror3636;
struct TNimObject;
struct Systemerror3626;
struct Outofmemerror3650;
struct TY159201;
typedef N_NIMCALL_PTR(NIM_BOOL, TY10009) (Exception* e);
typedef N_NIMCALL_PTR(NIM_BOOL, TY10014) (Exception* e);
typedef N_NIMCALL_PTR(void, TY10019) (void);
typedef N_NIMCALL_PTR(void, TY3489) (void* p, NI op);
typedef N_NIMCALL_PTR(void*, TY3494) (void* p);
struct  TNimType  {
NI size;
NU8 kind;
NU8 flags;
TNimType* base;
TNimNode* node;
void* finalizer;
TY3489 marker;
TY3494 deepcopy;
};
typedef Avlnode29486* TY29493[2];
struct  Avlnode29486  {
TY29493 link;
NI key;
NI upperbound;
NI level;
};
struct  Cellseq47322  {
NI len;
NI cap;
Cell47306** d;
};
struct  Cellset47318  {
NI counter;
NI max;
Pagedesc47314* head;
Pagedesc47314** data;
};
typedef Smallchunk29440* TY29503[512];
typedef Trunk29410* Trunkbuckets29412[256];
struct  Intset29414  {
Trunkbuckets29412 data;
};
struct  Memregion29488  {
NI minlargeobj;
NI maxlargeobj;
TY29503 freesmallchunks;
Llchunk29482* llmem;
NI currmem;
NI maxmem;
NI freemem;
NI lastsize;
Bigchunk29442* freechunkslist;
Intset29414 chunkstarts;
Avlnode29486* root;
Avlnode29486* deleted;
Avlnode29486* last;
Avlnode29486* freeavlnodes;
};
struct  Gcstat49614  {
NI stackscans;
NI cyclecollections;
NI maxthreshold;
NI maxstacksize;
NI maxstackcells;
NI cycletablesize;
NI64 maxpause;
};
struct  Gcheap49618  {
Gcstack49616* stack;
void* stackbottom;
NI cyclethreshold;
Cellseq47322 zct;
Cellseq47322 decstack;
Cellset47318 cycleroots;
Cellseq47322 tempstack;
NI recgclock;
Memregion29488 region;
Gcstat49614 stat;
};
struct  Basechunk29438  {
NI prevsize;
NI size;
NIM_BOOL used;
};
struct  Smallchunk29440  : public Basechunk29438 {
Smallchunk29440* next;
Smallchunk29440* prev;
Freecell29430* freelist;
NI free;
NI acc;
NF data;
};
struct  Bigchunk29442  : public Basechunk29438 {
Bigchunk29442* next;
Bigchunk29442* prev;
NI align;
NF data;
};
typedef NI TY29419[8];
struct  Trunk29410  {
Trunk29410* next;
NI key;
TY29419 bits;
};
struct  Llchunk29482  {
NI size;
NI acc;
Llchunk29482* next;
};
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
struct  Freecell29430  {
Freecell29430* next;
NI zerofield;
};
typedef N_NIMCALL_PTR(void, TY19201) (NimStringDesc* msg);
typedef TFrame* TY19803[128];
struct  Cell47306  {
NI refcount;
TNimType* typ;
};
struct  Pagedesc47314  {
Pagedesc47314* next;
NI key;
TY29419 bits;
};
typedef N_NIMCALL_PTR(void, Finalizer) (void* self);
struct  TNimNode  {
NU8 kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
struct  Edge159419  {
NI src;
NI dst;
NI weight;
NI rev;
};
struct  TNimObject  {
TNimType* m_type;
};
struct  Exception  : public TNimObject {
Exception* parent;
NCSTRING name;
NimStringDesc* message;
NimStringDesc* trace;
};
struct  Arithmeticerror3636  : public Exception {
};
struct  Overflowerror3640  : public Arithmeticerror3636 {
};
struct  Systemerror3626  : public Exception {
};
struct  Outofmemerror3650  : public Systemerror3626 {
};
struct  Gcstack49616  {
Gcstack49616* prev;
Gcstack49616* next;
void* starts;
void* pos;
NI maxstacksize;
};
typedef struct {
N_NIMCALL_PTR(NIM_BOOL, ClPrc) (Exception* e, void* ClEnv);
void* ClEnv;
} TY17811;
struct  TSafePoint  {
TSafePoint* prev;
NI status;
jmp_buf context;
NIM_BOOL hasRaiseAction;
TY17811 raiseAction;
};
struct TY159416 : TGenericSeq {
  Edge159419 data[SEQ_DECL_SIZE];
};
struct Graph159415 : TGenericSeq {
  TY159416* data[SEQ_DECL_SIZE];
};
struct TY159201 : TGenericSeq {
  NI data[SEQ_DECL_SIZE];
};
static N_INLINE(void, initallocator_11601)(void);
static N_INLINE(void, initStackBottom)(void);
N_NOINLINE(void, setStackBottom)(void* thestackbottom);
N_NIMCALL(void, initgc_11401)(void);
N_NIMCALL(void, init_47404)(Cellseq47322& s, NI cap);
N_NOCONV(void*, alloc0_7417)(NI size);
N_NIMCALL(void*, alloc0_46016)(Memregion29488& allocator, NI size);
N_NIMCALL(void*, alloc_45840)(Memregion29488& allocator, NI size);
N_NIMCALL(void*, rawalloc_36668)(Memregion29488& a, NI requestedsize);
static N_INLINE(NI, roundup_28001)(NI x, NI v);
N_NIMCALL(Smallchunk29440*, getsmallchunk_36016)(Memregion29488& a);
N_NIMCALL(Bigchunk29442*, getbigchunk_35216)(Memregion29488& a, NI size);
static N_INLINE(void, listremove_33002)(Bigchunk29442*& head, Bigchunk29442* c);
N_NIMCALL(void, splitchunk_35010)(Memregion29488& a, Bigchunk29442* c, NI size);
static N_INLINE(void, updateprevsize_32069)(Memregion29488& a, Bigchunk29442* c, NI prevsize);
static N_INLINE(NIM_BOOL, isaccessible_32016)(Memregion29488* a, void* p);
N_NIMCALL(NIM_BOOL, contains_30740)(Intset29414* s, NI key);
N_NIMCALL(Trunk29410*, intsetget_30690)(Intset29414* t, NI key);
static N_INLINE(NI, pageindex_31175)(void* p);
N_NIMCALL(void, incl_30761)(Memregion29488& a, Intset29414& s, NI key);
N_NIMCALL(Trunk29410*, intsetput_30712)(Memregion29488& a, Intset29414& t, NI key);
N_NIMCALL(void*, llalloc_29643)(Memregion29488& a, NI size);
static N_INLINE(void*, osallocpages_29214)(NI size);
N_NOINLINE(void, raiseoutofmem_27834)(void);
static N_INLINE(void, inccurrmem_29602)(Memregion29488& a, NI bytes);
static N_INLINE(NI, pageindex_31170)(Basechunk29438* c);
static N_INLINE(void, listadd_34225)(Bigchunk29442*& head, Bigchunk29442* c);
N_NIMCALL(Bigchunk29442*, requestoschunks_31187)(Memregion29488& a, NI size);
static N_INLINE(void, listadd_37616)(Smallchunk29440*& head, Smallchunk29440* c);
static N_INLINE(void, listremove_40402)(Smallchunk29440*& head, Smallchunk29440* c);
N_NIMCALL(void, add_30553)(Memregion29488& a, Avlnode29486*& t, NI key, NI upperbound);
N_NIMCALL(Avlnode29486*, allocavlnode_29828)(Memregion29488& a, NI key, NI upperbound);
N_NIMCALL(void, skew_30534)(Avlnode29486*& t);
N_NIMCALL(void, split_30539)(Avlnode29486*& t);
N_NIMCALL(void, init_47419)(Cellset47318& s);
N_NOCONV(void, signalHandler)(int sig);
N_NIMCALL(void, showerrormessage_19406)(NCSTRING data);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str);
N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str, NI len);
N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space);
N_NIMCALL(void*, newObjNoInit)(TNimType* typ, NI size);
N_NIMCALL(void*, rawnewobj_57401)(TNimType* typ, NI size, Gcheap49618& gch);
N_NIMCALL(void, collectct_51607)(Gcheap49618& gch);
N_NOINLINE(NI, stacksize_71401)(void);
static N_INLINE(NI, getoccupiedmem_47231)(Memregion29488* a);
N_NIMCALL(void, collectctbody_75209)(Gcheap49618& gch);
static N_INLINE(void, prepareforinteriorpointerchecking_44688)(Memregion29488& a);
N_NIMCALL(NI, lowgauge_30412)(Avlnode29486* n);
N_NIMCALL(NI, highgauge_30429)(Avlnode29486* n);
N_CDECL(void, markstackandregisters_72637)(Gcheap49618& gch);
static N_INLINE(void, gcmark_70416)(Gcheap49618& gch, void* p);
static N_INLINE(Cell47306*, usrtocell_51241)(void* usr);
N_NIMCALL(void*, interiorallocatedptr_44692)(Memregion29488* a, void* p);
static N_INLINE(Basechunk29438*, pageaddr_31180)(void* p);
static N_INLINE(NIM_BOOL, chunkunused_31089)(Basechunk29438* c);
static N_INLINE(NIM_BOOL, issmallchunk_31069)(Basechunk29438* c);
N_NIMCALL(Avlnode29486*, inrange_30481)(Avlnode29486* root, NI key);
static N_INLINE(void, add_47384)(Cellseq47322& s, Cell47306* c);
N_NOCONV(void*, alloc_7401)(NI size);
N_NOCONV(void, dealloc_7448)(void* p);
N_NIMCALL(void, dealloc_46023)(Memregion29488& allocator, void* p);
N_NIMCALL(void, rawdealloc_43018)(Memregion29488& a, void* p);
N_NIMCALL(void, freebigchunk_32203)(Memregion29488& a, Bigchunk29442* c_32207);
N_NIMCALL(void, excl_30774)(Intset29414& s, NI key);
N_NIMCALL(void, freeoschunks_31807)(Memregion29488& a, void* p, NI size);
static N_INLINE(void, osdeallocpages_29220)(void* p, NI size);
static N_INLINE(void, deccurrmem_29616)(Memregion29488& a, NI bytes);
N_NIMCALL(void, del_30603)(Memregion29488& a, Avlnode29486*& t, NI x);
static N_INLINE(void, deallocavlnode_30403)(Memregion29488& a, Avlnode29486* n);
N_NIMCALL(void, markthreadstacks_71003)(Gcheap49618& gch);
N_NIMCALL(NIM_BOOL, collectzct_69806)(Gcheap49618& gch);
static N_INLINE(NIM_BOOL, canbecycleroot_51259)(Cell47306* c);
N_NIMCALL(void, excl_48075)(Cellset47318& s, Cell47306* cell);
N_NIMCALL(Pagedesc47314*, cellsetget_47451)(Cellset47318* t, NI key);
static N_INLINE(NI, nexttry_47446)(NI h, NI maxhash);
N_NIMCALL(void, preparedealloc_51808)(Cell47306* cell);
static N_INLINE(void*, celltousr_51223)(Cell47306* cell);
N_NIMCALL(void, forallchildren_51614)(Cell47306* cell, NU8 op);
N_NIMCALL(void, forallchildrenaux_51622)(void* dest, TNimType* mt, NU8 op);
N_NIMCALL(void, dooperation_51618)(void* p, NU8 op);
static N_INLINE(void, decref_53201)(Cell47306* c);
static N_INLINE(void, rtladdzct_52801)(Cell47306* c);
N_NOINLINE(void, addzct_51217)(Cellseq47322& s, Cell47306* c);
static N_INLINE(void, rtladdcycleroot_52020)(Cell47306* c);
N_NOINLINE(void, incl_48047)(Cellset47318& s, Cell47306* cell);
N_NIMCALL(Pagedesc47314*, cellsetput_47841)(Cellset47318& t, NI key);
N_NIMCALL(void, cellsetenlarge_47803)(Cellset47318& t);
N_NIMCALL(void, cellsetrawinsert_47471)(Cellset47318* t, Pagedesc47314** data, Pagedesc47314* desc);
N_NIMCALL(void, markgray_66802)(Cell47306* s);
N_NIMCALL(void, scan_67201)(Cell47306* s);
N_NIMCALL(void, scanblack_67001)(Cell47306* s);
N_NIMCALL(void, collectwhite_67401)(Cell47306* s);
N_NIMCALL(NIM_BOOL, isallocatedptr_36402)(Memregion29488* a, void* p);
N_NIMCALL(void, freecycliccell_66015)(Gcheap49618& gch, Cell47306* c);
N_NIMCALL(void, forallslotsaux_55807)(void* dest, TNimNode* n, NU8 op);
N_NIMCALL(TNimNode*, selectbranch_27407)(void* aa, TNimNode* n);
N_NIMCALL(NI, getdiscriminant_27004)(void* aa, TNimNode* n);
N_NIMCALL(void, collectcycles_70020)(Gcheap49618& gch);
N_NIMCALL(void, markroots_67602)(Gcheap49618& gch);
N_NIMCALL(void, collectroots_70001)(Gcheap49618& gch);
N_NIMCALL(void, cellsetreset_55801)(Cellset47318& s);
N_NIMCALL(void, deinit_47427)(Cellset47318& s);
N_NIMCALL(NI, getoccupiedmem_8055)(void);
N_NIMCALL(NI, gettotalmem_8059)(void);
N_NIMCALL(NI, getfreemem_8057)(void);
N_NIMCALL(void, unmarkstackandregisters_75002)(Gcheap49618& gch);
static N_INLINE(void, addnewobjtozct_56874)(Cell47306* res, Gcheap49618& gch);
N_NIMCALL(void, writetostderr_19401)(NCSTRING msg);
N_NIMCALL(void, write_15501)(FILE* f, NCSTRING c);
N_NIMCALL(void, registersignalhandler_22802)(void);
N_NIMCALL(NI, getRefcount)(void* p);
N_NIMCALL(void*, newSeq)(TNimType* typ, NI len);
static N_INLINE(NI, addInt)(NI a, NI b);
N_NOINLINE(void, raiseOverflow)(void);
static N_INLINE(void, sysfatal_23663)(NimStringDesc* message) __attribute__((noreturn));
N_NIMCALL(void, nimGCvisit)(void* d, NI op);
N_NIMCALL(void, TMP39)(void* p, NI op);
N_NIMCALL(void, TMP40)(void* p, NI op);
N_NIMCALL(void*, newObj)(TNimType* typ, NI size);
N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src);
N_NIMCALL(void*, newObjRC1)(TNimType* typ, NI size);
static N_INLINE(void, nimGCunrefNoCycle)(void* p);
N_NIMCALL(void, raiseException)(Exception* e, NCSTRING ename);
N_NIMCALL(void, raiseexceptionaux_20601)(Exception* e);
static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj, TNimType* subclass, TNimType** cache);
N_NOINLINE(NIM_BOOL, isobjslowpath_23534)(TNimType* obj, TNimType* subclass, TNimType** cache);
static N_INLINE(void, quitordebug_20404)(void);
static N_INLINE(void, pushCurrentException)(Exception* e);
static N_INLINE(void, asgnRef)(void** dest, void* src);
static N_INLINE(void, incref_53619)(Cell47306* c);
N_NIMCALL(NI, mulInt)(NI a, NI b);
N_NIMCALL(void, genericAssign)(void* dest, void* src, TNimType* mt);
N_NIMCALL(void, genericassignaux_83006)(void* dest, void* src, TNimType* mt, NIM_BOOL shallow);
N_NIMCALL(void, unsureAsgnRef)(void** dest, void* src);
N_NOINLINE(NIM_BOOL, isonstack_51611)(void* p);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src);
N_NIMCALL(void, genericassignaux_83012)(void* dest, void* src, TNimNode* n, NIM_BOOL shallow);
N_NIMCALL(void, genericresetaux_83001)(void* dest, TNimNode* n);
N_NIMCALL(void, genericReset)(void* dest, TNimType* mt);
static N_INLINE(NI, resize_79001)(NI old);
N_NIMCALL(void*, growobj_66009)(void* old, NI newsize);
N_NIMCALL(void*, growobj_63203)(void* old, NI newsize, Gcheap49618& gch);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, rawNewString)(NI space);
N_NIMCALL(NimStringDesc*, mnewString)(NI len);
N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s, NI newlen);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen);
STRING_LITERAL(TMP2, "out of memory", 13);
STRING_LITERAL(TMP41, "over- or underflow", 18);
NIM_BOOL nimvm_5751;
NI nim_program_result;
TY10009 globalraisehook_10013;
TY10014 localraisehook_10018;
TY10019 outofmemhook_10021;
TNimType strdesc_12203;
TY19201 errormessagewriter_19204;
TFrame* frameptr_19436;
TSafePoint* exchandler_19437;
Exception* currexception_19439;
TY19803 tempframes_19804;
Avlnode29486 bottomdata_29519;
Avlnode29486* bottom_29520;
Gcheap49618 gch_49659;
NIM_BOOL localgcinitialized_71424;
NIM_CHAR decimalpoint_80405;
TNimType NTI104; /* int */
extern TNimType NTI159415; /* Graph */
TNimType NTI3608; /* RootObj */
TNimType NTI3624; /* Exception */
TNimType NTI10010; /* ref Exception */
TNimType NTI140; /* cstring */
TNimType NTI138; /* string */
TNimType NTI3636; /* ArithmeticError */
TNimType NTI3640; /* OverflowError */
TNimType NTI23670; /* ref OverflowError */
TNimType NTI3626; /* SystemError */
TNimType NTI3650; /* OutOfMemError */
static TNimType* Nim_OfCheck_CACHE1[2];
extern TNimType NTI159416; /* seq[Edge[system.int]] */
extern TNimType NTI159201; /* seq[int] */

static N_INLINE(void, initallocator_11601)(void) {
	bottom_29520 = (&bottomdata_29519);
	(*bottom_29520).link[(((NI) 0))- 0] = bottom_29520;
	(*bottom_29520).link[(((NI) 1))- 0] = bottom_29520;
}

N_NOINLINE(void, setStackBottom)(void* thestackbottom) {
	{
		if (!(gch_49659.stackbottom == NIM_NIL)) goto LA3;
{		gch_49659.stackbottom = thestackbottom;
}	}
	goto LA1;
	LA3: ;
	{
		NI a = ((NI) (thestackbottom));
		NI b = ((NI) (gch_49659.stackbottom));
		gch_49659.stackbottom = ((void*) (((a >= b) ? a : b)));
	}
	LA1: ;
}

static N_INLINE(void, initStackBottom)(void) {
	void* volatile locals;
	locals = 0;
	locals = ((void*) ((&locals)));
	setStackBottom(locals);
}

static N_INLINE(NI, roundup_28001)(NI x, NI v) {
	NI result;
	result = 0;
	result = (NI)((NI)(x + (NI)(v - ((NI) 1))) & (NI)((NU64) ~((NI)(v - ((NI) 1)))));
	return result;
}

static N_INLINE(void, listremove_33002)(Bigchunk29442*& head, Bigchunk29442* c) {
	{
		if (!(c == head)) goto LA3;
{		head = (*c).next;
		{
			if (!!((head == NIM_NIL))) goto LA7;
{			(*head).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		(*(*c).prev).next = (*c).next;
		{
			if (!!(((*c).next == NIM_NIL))) goto LA12;
{			(*(*c).next).prev = (*c).prev;
}		}
		LA12: ;
	}
	LA1: ;
	(*c).next = NIM_NIL;
	(*c).prev = NIM_NIL;
}

N_NIMCALL(Trunk29410*, intsetget_30690)(Intset29414* t, NI key) {
	Trunk29410* result;
{	result = 0;
	Trunk29410* it = (*t).data[((NI)(key & ((NI) 255)))- 0];
	{
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			{
				if (!((*it).key == key)) goto LA5;
{				result = it;
				goto BeforeRet;
}			}
			LA5: ;
			it = (*it).next;
		} LA2: ;
	}
	result = NIM_NIL;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NIM_BOOL, contains_30740)(Intset29414* s, NI key) {
	NIM_BOOL result;
	result = 0;
	Trunk29410* t = intsetget_30690(s, (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		NI u = (NI)(key & ((NI) 511));
		result = !(((NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63))))))) == ((NI) 0)));
}	}
	goto LA1;
	LA3: ;
	{
		result = NIM_FALSE;
	}
	LA1: ;
	return result;
}

static N_INLINE(NI, pageindex_31175)(void* p) {
	NI result;
	result = 0;
	result = (NI)((NU64)(((NI) (p))) >> (NU64)(((NI) 12)));
	return result;
}

static N_INLINE(NIM_BOOL, isaccessible_32016)(Memregion29488* a, void* p) {
	NIM_BOOL result;
	result = 0;
	result = contains_30740((&(*a).chunkstarts), pageindex_31175(p));
	return result;
}

static N_INLINE(void, updateprevsize_32069)(Memregion29488& a, Bigchunk29442* c, NI prevsize) {
	Basechunk29438* ri = ((Basechunk29438*) ((NI)((NU64)(((NI) (c))) + (NU64)((*c).size))));
	{
		if (!isaccessible_32016((&a), ((void*) (ri)))) goto LA3;
{		(*ri).prevsize = prevsize;
}	}
	LA3: ;
}

N_NOINLINE(void, raiseoutofmem_27834)(void) {
	{
		if (!!((outofmemhook_10021 == NIM_NIL))) goto LA3;
{		outofmemhook_10021();
}	}
	LA3: ;
	printf("%s\012", ((NimStringDesc*) &TMP2)? (((NimStringDesc*) &TMP2))->data:"nil");
	fflush(stdout);
	exit(((NI) 1));
}

static N_INLINE(void*, osallocpages_29214)(NI size) {
	void* result;
	result = 0;
	result = mmap(NIM_NIL, size, ((int) 3), (NI32)(((NI32) 2) | MAP_ANONYMOUS), ((int) -1), ((NI) 0));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (result == NIM_NIL);
		if (LOC3) goto LA4;
		LOC3 = (result == ((void*) -1));
		LA4: ;
		if (!LOC3) goto LA5;
{		raiseoutofmem_27834();
}	}
	LA5: ;
	return result;
}

static N_INLINE(void, inccurrmem_29602)(Memregion29488& a, NI bytes) {
	a.currmem += bytes;
}

N_NIMCALL(void*, llalloc_29643)(Memregion29488& a, NI size) {
	void* result;
	result = 0;
	{
		NIM_BOOL LOC3;
		void* LOC7;
		LOC3 = 0;
		LOC3 = (a.llmem == NIM_NIL);
		if (LOC3) goto LA4;
		LOC3 = ((*a.llmem).size < size);
		LA4: ;
		if (!LOC3) goto LA5;
{		Llchunk29482* old = a.llmem;
		LOC7 = 0;
		LOC7 = osallocpages_29214(((NI) 4096));
		a.llmem = ((Llchunk29482*) (LOC7));
		inccurrmem_29602(a, ((NI) 4096));
		(*a.llmem).size = (NI)(((NI) 4096) - ((NI)sizeof(Llchunk29482)));
		(*a.llmem).acc = ((NI)sizeof(Llchunk29482));
		(*a.llmem).next = old;
}	}
	LA5: ;
	result = ((void*) ((NI)(((NI) (a.llmem)) + (*a.llmem).acc)));
	(*a.llmem).size -= size;
	(*a.llmem).acc += size;
	zeroMem(result, ((NI) (size)));
	return result;
}

N_NIMCALL(Trunk29410*, intsetput_30712)(Memregion29488& a, Intset29414& t, NI key) {
	Trunk29410* result;
	result = 0;
	result = intsetget_30690((&t), key);
	{
		void* LOC5;
		if (!(result == NIM_NIL)) goto LA3;
{		LOC5 = 0;
		LOC5 = llalloc_29643(a, ((NI)sizeof(Trunk29410)));
		result = ((Trunk29410*) (LOC5));
		(*result).next = t.data[((NI)(key & ((NI) 255)))- 0];
		t.data[((NI)(key & ((NI) 255)))- 0] = result;
		(*result).key = key;
}	}
	LA3: ;
	return result;
}

N_NIMCALL(void, incl_30761)(Memregion29488& a, Intset29414& s, NI key) {
	Trunk29410* t = intsetput_30712(a, s, (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	NI u = (NI)(key & ((NI) 511));
	(*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63)))))));
}

static N_INLINE(NI, pageindex_31170)(Basechunk29438* c) {
	NI result;
	result = 0;
	result = (NI)((NU64)(((NI) (c))) >> (NU64)(((NI) 12)));
	return result;
}

static N_INLINE(void, listadd_34225)(Bigchunk29442*& head, Bigchunk29442* c) {
	(*c).next = head;
	{
		if (!!((head == NIM_NIL))) goto LA3;
{		(*head).prev = c;
}	}
	LA3: ;
	head = c;
}

N_NIMCALL(void, splitchunk_35010)(Memregion29488& a, Bigchunk29442* c, NI size) {
	Bigchunk29442* rest = ((Bigchunk29442*) ((NI)((NU64)(((NI) (c))) + (NU64)(size))));
	(*rest).size = (NI)((*c).size - size);
	(*rest).used = NIM_FALSE;
	(*rest).next = NIM_NIL;
	(*rest).prev = NIM_NIL;
	(*rest).prevsize = size;
	updateprevsize_32069(a, c, (*rest).size);
	(*c).size = size;
	incl_30761(a, a.chunkstarts, pageindex_31170(rest));
	listadd_34225(a.freechunkslist, rest);
}

N_NIMCALL(Bigchunk29442*, requestoschunks_31187)(Memregion29488& a, NI size) {
	Bigchunk29442* result;
	void* LOC1;
	NI LOC6;
	result = 0;
	inccurrmem_29602(a, size);
	a.freemem += size;
	LOC1 = 0;
	LOC1 = osallocpages_29214(size);
	result = ((Bigchunk29442*) (LOC1));
	(*result).next = NIM_NIL;
	(*result).prev = NIM_NIL;
	(*result).used = NIM_FALSE;
	(*result).size = size;
	NI nxt = (NI)((NU64)(((NI) (result))) + (NU64)(size));
	Basechunk29438* next = ((Basechunk29438*) (nxt));
	{
		if (!contains_30740((&a.chunkstarts), pageindex_31170(next))) goto LA4;
{		(*next).prevsize = size;
}	}
	LA4: ;
	LOC6 = 0;
	{
		if (!!((a.lastsize == ((NI) 0)))) goto LA9;
{		LOC6 = a.lastsize;
}	}
	goto LA7;
	LA9: ;
	{
		LOC6 = ((NI) 4096);
	}
	LA7: ;
	NI lastsize = LOC6;
	NI prv = (NI)((NU64)(((NI) (result))) - (NU64)(lastsize));
	Basechunk29438* prev = ((Basechunk29438*) (prv));
	{
		NIM_BOOL LOC14;
		LOC14 = 0;
		LOC14 = contains_30740((&a.chunkstarts), pageindex_31170(prev));
		if (!(LOC14)) goto LA15;
		LOC14 = ((*prev).size == lastsize);
		LA15: ;
		if (!LOC14) goto LA16;
{		(*result).prevsize = lastsize;
}	}
	goto LA12;
	LA16: ;
	{
		(*result).prevsize = ((NI) 0);
	}
	LA12: ;
	a.lastsize = size;
	return result;
}

N_NIMCALL(Bigchunk29442*, getbigchunk_35216)(Memregion29488& a, NI size) {
	Bigchunk29442* result;
	result = 0;
	result = a.freechunkslist;
	{
		{
			while (1) {
				if (!!((result == NIM_NIL))) goto LA3;
				{
					if (!((*result).size == size)) goto LA6;
{					listremove_33002(a.freechunkslist, result);
					goto LA1;
}				}
				goto LA4;
				LA6: ;
				{
					if (!(size < (*result).size)) goto LA9;
{					listremove_33002(a.freechunkslist, result);
					splitchunk_35010(a, result, size);
					goto LA1;
}				}
				goto LA4;
				LA9: ;
				LA4: ;
				result = (*result).next;
			} LA3: ;
		}
		{
			if (!(size < ((NI) 524288))) goto LA13;
{			result = requestoschunks_31187(a, ((NI) 524288));
			splitchunk_35010(a, result, size);
}		}
		goto LA11;
		LA13: ;
		{
			result = requestoschunks_31187(a, size);
		}
		LA11: ;
	} LA1: ;
	(*result).prevsize = ((NI) 0);
	(*result).used = NIM_TRUE;
	incl_30761(a, a.chunkstarts, pageindex_31170(result));
	a.freemem -= size;
	return result;
}

N_NIMCALL(Smallchunk29440*, getsmallchunk_36016)(Memregion29488& a) {
	Smallchunk29440* result;
	result = 0;
	Bigchunk29442* res = getbigchunk_35216(a, ((NI) 4096));
	result = ((Smallchunk29440*) (res));
	return result;
}

static N_INLINE(void, listadd_37616)(Smallchunk29440*& head, Smallchunk29440* c) {
	(*c).next = head;
	{
		if (!!((head == NIM_NIL))) goto LA3;
{		(*head).prev = c;
}	}
	LA3: ;
	head = c;
}

static N_INLINE(void, listremove_40402)(Smallchunk29440*& head, Smallchunk29440* c) {
	{
		if (!(c == head)) goto LA3;
{		head = (*c).next;
		{
			if (!!((head == NIM_NIL))) goto LA7;
{			(*head).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		(*(*c).prev).next = (*c).next;
		{
			if (!!(((*c).next == NIM_NIL))) goto LA12;
{			(*(*c).next).prev = (*c).prev;
}		}
		LA12: ;
	}
	LA1: ;
	(*c).next = NIM_NIL;
	(*c).prev = NIM_NIL;
}

N_NIMCALL(Avlnode29486*, allocavlnode_29828)(Memregion29488& a, NI key, NI upperbound) {
	Avlnode29486* result;
	result = 0;
	{
		if (!!((a.freeavlnodes == NIM_NIL))) goto LA3;
{		result = a.freeavlnodes;
		a.freeavlnodes = (*a.freeavlnodes).link[(((NI) 0))- 0];
}	}
	goto LA1;
	LA3: ;
	{
		void* LOC6;
		LOC6 = 0;
		LOC6 = llalloc_29643(a, ((NI)sizeof(Avlnode29486)));
		result = ((Avlnode29486*) (LOC6));
	}
	LA1: ;
	(*result).key = key;
	(*result).upperbound = upperbound;
	(*result).link[(((NI) 0))- 0] = bottom_29520;
	(*result).link[(((NI) 1))- 0] = bottom_29520;
	(*result).level = ((NI) 1);
	return result;
}

N_NIMCALL(void, skew_30534)(Avlnode29486*& t) {
	{
		if (!((*(*t).link[(((NI) 0))- 0]).level == (*t).level)) goto LA3;
{		Avlnode29486* temp = t;
		t = (*t).link[(((NI) 0))- 0];
		(*temp).link[(((NI) 0))- 0] = (*t).link[(((NI) 1))- 0];
		(*t).link[(((NI) 1))- 0] = temp;
}	}
	LA3: ;
}

N_NIMCALL(void, split_30539)(Avlnode29486*& t) {
	{
		if (!((*(*(*t).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]).level == (*t).level)) goto LA3;
{		Avlnode29486* temp = t;
		t = (*t).link[(((NI) 1))- 0];
		(*temp).link[(((NI) 1))- 0] = (*t).link[(((NI) 0))- 0];
		(*t).link[(((NI) 0))- 0] = temp;
		(*t).level += ((NI) 1);
}	}
	LA3: ;
}

N_NIMCALL(void, add_30553)(Memregion29488& a, Avlnode29486*& t, NI key, NI upperbound) {
	{
		if (!(t == bottom_29520)) goto LA3;
{		t = allocavlnode_29828(a, key, upperbound);
}	}
	goto LA1;
	LA3: ;
	{
		{
			if (!((NU64)(key) < (NU64)((*t).key))) goto LA8;
{			add_30553(a, (*t).link[(((NI) 0))- 0], key, upperbound);
}		}
		goto LA6;
		LA8: ;
		{
			if (!((NU64)((*t).key) < (NU64)(key))) goto LA11;
{			add_30553(a, (*t).link[(((NI) 1))- 0], key, upperbound);
}		}
		goto LA6;
		LA11: ;
		{
		}
		LA6: ;
		skew_30534(t);
		split_30539(t);
	}
	LA1: ;
}

N_NIMCALL(void*, rawalloc_36668)(Memregion29488& a, NI requestedsize) {
	void* result;
	result = 0;
	NI size = roundup_28001(requestedsize, ((NI) 8));
	{
		if (!(size <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))))) goto LA3;
{		NI s = (NI)(size / ((NI) 8));
		Smallchunk29440* c = a.freesmallchunks[(s)- 0];
		{
			if (!(c == NIM_NIL)) goto LA7;
{			c = getsmallchunk_36016(a);
			(*c).freelist = NIM_NIL;
			(*c).size = size;
			(*c).acc = size;
			(*c).free = (NI)((NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))) - size);
			(*c).next = NIM_NIL;
			(*c).prev = NIM_NIL;
			listadd_37616(a.freesmallchunks[(s)- 0], c);
			result = ((void*) ((&(*c).data)));
}		}
		goto LA5;
		LA7: ;
		{
			{
				if (!((*c).freelist == NIM_NIL)) goto LA12;
{				result = ((void*) ((NI)((NU64)(((NI) ((&(*c).data)))) + (NU64)((*c).acc))));
				(*c).acc += size;
}			}
			goto LA10;
			LA12: ;
			{
				result = ((void*) ((*c).freelist));
				(*c).freelist = (*(*c).freelist).next;
			}
			LA10: ;
			(*c).free -= size;
		}
		LA5: ;
		{
			if (!((*c).free < size)) goto LA17;
{			listremove_40402(a.freesmallchunks[(s)- 0], c);
}		}
		LA17: ;
}	}
	goto LA1;
	LA3: ;
	{
		size = roundup_28001((NI)(requestedsize + (NI)(((NI)sizeof(Bigchunk29442)) - ((NI) 8))), ((NI) 4096));
		Bigchunk29442* c = getbigchunk_35216(a, size);
		result = ((void*) ((&(*c).data)));
		{
			if (!(a.root == NIM_NIL)) goto LA22;
{			a.root = bottom_29520;
}		}
		LA22: ;
		add_30553(a, a.root, ((NI) (result)), (NI)((NU64)(((NI) (result))) + (NU64)(size)));
	}
	LA1: ;
	return result;
}

N_NIMCALL(void*, alloc_45840)(Memregion29488& allocator, NI size) {
	void* result;
	result = 0;
	result = rawalloc_36668(allocator, (NI)(((NI) (size)) + ((NI)sizeof(Freecell29430))));
	(*((Freecell29430*) (result))).zerofield = ((NI) 1);
	result = ((void*) ((NI)((NU64)(((NI) (result))) + (NU64)(((NI)sizeof(Freecell29430))))));
	return result;
}

N_NIMCALL(void*, alloc0_46016)(Memregion29488& allocator, NI size) {
	void* result;
	result = 0;
	result = alloc_45840(allocator, size);
	zeroMem(result, size);
	return result;
}

N_NOCONV(void*, alloc0_7417)(NI size) {
	void* result;
	result = 0;
	result = alloc0_46016(gch_49659.region, size);
	return result;
}

N_NIMCALL(void, init_47404)(Cellseq47322& s, NI cap) {
	void* LOC1;
	s.len = ((NI) 0);
	s.cap = cap;
	LOC1 = 0;
	LOC1 = alloc0_7417(((NI) ((NI)(cap * ((NI) 8)))));
	s.d = ((Cell47306**) (LOC1));
}

N_NIMCALL(void, init_47419)(Cellset47318& s) {
	void* LOC1;
	LOC1 = 0;
	LOC1 = alloc0_7417(((NI) 8192));
	s.data = ((Pagedesc47314**) (LOC1));
	s.max = ((NI) 1023);
	s.counter = ((NI) 0);
	s.head = NIM_NIL;
}

N_NIMCALL(void, initgc_11401)(void) {
	gch_49659.cyclethreshold = ((NI) 4194304);
	gch_49659.stat.stackscans = ((NI) 0);
	gch_49659.stat.cyclecollections = ((NI) 0);
	gch_49659.stat.maxthreshold = ((NI) 0);
	gch_49659.stat.maxstacksize = ((NI) 0);
	gch_49659.stat.maxstackcells = ((NI) 0);
	gch_49659.stat.cycletablesize = ((NI) 0);
	init_47404(gch_49659.zct, ((NI) 1024));
	init_47404(gch_49659.tempstack, ((NI) 1024));
	init_47419(gch_49659.cycleroots);
	init_47404(gch_49659.decstack, ((NI) 1024));
}

N_NOINLINE(NI, stacksize_71401)(void) {
	NI result;
	void* volatile stacktop;
	result = 0;
	stacktop = 0;
	result = ((NI)(((NI) ((&stacktop))) - ((NI) (gch_49659.stackbottom))) > 0? ((NI)(((NI) ((&stacktop))) - ((NI) (gch_49659.stackbottom)))) : -((NI)(((NI) ((&stacktop))) - ((NI) (gch_49659.stackbottom)))));
	return result;
}

static N_INLINE(NI, getoccupiedmem_47231)(Memregion29488* a) {
	NI result;
	result = 0;
	result = (NI)((*a).currmem - (*a).freemem);
	return result;
}

N_NIMCALL(NI, lowgauge_30412)(Avlnode29486* n) {
	NI result;
	result = 0;
	Avlnode29486* it = n;
	{
		while (1) {
			if (!!((it == bottom_29520))) goto LA2;
			result = (*it).key;
			it = (*it).link[(((NI) 0))- 0];
		} LA2: ;
	}
	return result;
}

N_NIMCALL(NI, highgauge_30429)(Avlnode29486* n) {
	NI result;
	result = 0;
	result = ((NI) -1);
	Avlnode29486* it = n;
	{
		while (1) {
			if (!!((it == bottom_29520))) goto LA2;
			result = (*it).upperbound;
			it = (*it).link[(((NI) 1))- 0];
		} LA2: ;
	}
	return result;
}

static N_INLINE(void, prepareforinteriorpointerchecking_44688)(Memregion29488& a) {
	a.minlargeobj = lowgauge_30412(a.root);
	a.maxlargeobj = highgauge_30429(a.root);
}

static N_INLINE(Cell47306*, usrtocell_51241)(void* usr) {
	Cell47306* result;
	result = 0;
	result = ((Cell47306*) ((NI)((NU64)(((NI) (usr))) - (NU64)(((NI)sizeof(Cell47306))))));
	return result;
}

static N_INLINE(Basechunk29438*, pageaddr_31180)(void* p) {
	Basechunk29438* result;
	result = 0;
	result = ((Basechunk29438*) ((NI)(((NI) (p)) & ((NI) -4096))));
	return result;
}

static N_INLINE(NIM_BOOL, chunkunused_31089)(Basechunk29438* c) {
	NIM_BOOL result;
	result = 0;
	result = !((*c).used);
	return result;
}

static N_INLINE(NIM_BOOL, issmallchunk_31069)(Basechunk29438* c) {
	NIM_BOOL result;
{	result = 0;
	result = ((*c).size <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))));
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(Avlnode29486*, inrange_30481)(Avlnode29486* root, NI key) {
	Avlnode29486* result;
{	result = 0;
	Avlnode29486* it = root;
	{
		while (1) {
			if (!!((it == bottom_29520))) goto LA2;
			{
				NIM_BOOL LOC5;
				LOC5 = 0;
				LOC5 = ((NU64)((*it).key) <= (NU64)(key));
				if (!(LOC5)) goto LA6;
				LOC5 = ((NU64)(key) < (NU64)((*it).upperbound));
				LA6: ;
				if (!LOC5) goto LA7;
{				result = it;
				goto BeforeRet;
}			}
			LA7: ;
			it = (*it).link[(((NU64)((*it).key) < (NU64)(key)))- 0];
		} LA2: ;
	}
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void*, interiorallocatedptr_44692)(Memregion29488* a, void* p) {
	void* result;
	result = 0;
	{
		if (!isaccessible_32016(a, p)) goto LA3;
{		Basechunk29438* c_44697 = pageaddr_31180(p);
		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = chunkunused_31089(c_44697);
			if (!!(LOC7)) goto LA8;
{			{
				if (!issmallchunk_31069(c_44697)) goto LA12;
{				Smallchunk29440* c = ((Smallchunk29440*) (c_44697));
				NI offset = (NI)((NU64)(((NI) ((NI)(((NI) (p)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))));
				{
					if (!((NU64)(offset) < (NU64)((*c).acc))) goto LA16;
{					Freecell29430* d = ((Freecell29430*) ((NI)((NU64)((NI)((NU64)(((NI) ((&(*c).data)))) + (NU64)(offset))) - (NU64)((NI)((NU64)(offset) % (NU64)((*c).size))))));
					{
						if (!((NU64)(((NI) 1)) < (NU64)((*d).zerofield))) goto LA20;
{						result = ((void*) (d));
}					}
					LA20: ;
}				}
				LA16: ;
}			}
			goto LA10;
			LA12: ;
			{
				Bigchunk29442* c = ((Bigchunk29442*) (c_44697));
				NF* d = (&(*c).data);
				{
					NIM_BOOL LOC25;
					LOC25 = 0;
					LOC25 = (((void*) (d)) <= p);
					if (!(LOC25)) goto LA26;
					LOC25 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell29430*) (d))).zerofield));
					LA26: ;
					if (!LOC25) goto LA27;
{					result = ((void*) (d));
}				}
				LA27: ;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	goto LA1;
	LA3: ;
	{
		NI q = ((NI) (p));
		{
			NIM_BOOL LOC32;
			LOC32 = 0;
			LOC32 = ((NU64)((*a).minlargeobj) <= (NU64)(q));
			if (!(LOC32)) goto LA33;
			LOC32 = ((NU64)(q) <= (NU64)((*a).maxlargeobj));
			LA33: ;
			if (!LOC32) goto LA34;
{			Avlnode29486* avlnode = inrange_30481((*a).root, q);
			{
				Basechunk29438* LOC40;
				if (!!((avlnode == NIM_NIL))) goto LA38;
{				void* k = ((void*) ((*avlnode).key));
				LOC40 = 0;
				LOC40 = pageaddr_31180(k);
				Bigchunk29442* c = ((Bigchunk29442*) (LOC40));
				{
					if (!((NU64)(((NI) 1)) < (NU64)((*((Freecell29430*) (k))).zerofield))) goto LA43;
{					result = k;
}				}
				LA43: ;
}			}
			LA38: ;
}		}
		LA34: ;
	}
	LA1: ;
	return result;
}

N_NOCONV(void*, alloc_7401)(NI size) {
	void* result;
	result = 0;
	result = alloc_45840(gch_49659.region, size);
	return result;
}

N_NIMCALL(void, excl_30774)(Intset29414& s, NI key) {
	Trunk29410* t = intsetget_30690((&s), (NI)((NU64)(key) >> (NU64)(((NI) 9))));
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		NI u = (NI)(key & ((NI) 511));
		(*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(((NI) (u))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u)) & ((NI) 63)))))))));
}	}
	LA3: ;
}

static N_INLINE(void, osdeallocpages_29220)(void* p, NI size) {
	munmap(p, size);
}

static N_INLINE(void, deccurrmem_29616)(Memregion29488& a, NI bytes) {
	a.maxmem = ((a.maxmem >= a.currmem) ? a.maxmem : a.currmem);
	a.currmem -= bytes;
}

N_NIMCALL(void, freeoschunks_31807)(Memregion29488& a, void* p, NI size) {
	Basechunk29438* c = ((Basechunk29438*) (p));
	NI nxt = (NI)((NU64)(((NI) (p))) + (NU64)((*c).size));
	Basechunk29438* next = ((Basechunk29438*) (nxt));
	{
		if (!contains_30740((&a.chunkstarts), pageindex_31170(next))) goto LA3;
{		(*next).prevsize = ((NI) 0);
}	}
	LA3: ;
	excl_30774(a.chunkstarts, pageindex_31175(p));
	osdeallocpages_29220(p, size);
	deccurrmem_29616(a, size);
	a.freemem -= size;
}

N_NIMCALL(void, freebigchunk_32203)(Memregion29488& a, Bigchunk29442* c_32207) {
	Bigchunk29442* c = c_32207;
	a.freemem += (*c).size;
	Basechunk29438* ri = ((Basechunk29438*) ((NI)((NU64)(((NI) (c))) + (NU64)((*c).size))));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isaccessible_32016((&a), ((void*) (ri)));
		if (!(LOC3)) goto LA4;
		LOC3 = chunkunused_31089(ri);
		LA4: ;
		if (!LOC3) goto LA5;
{		{
			NIM_BOOL LOC9;
			LOC9 = 0;
			LOC9 = issmallchunk_31069(ri);
			if (!!(LOC9)) goto LA10;
{			listremove_33002(a.freechunkslist, ((Bigchunk29442*) (ri)));
			(*c).size += (*ri).size;
			excl_30774(a.chunkstarts, pageindex_31170(ri));
}		}
		LA10: ;
}	}
	LA5: ;
	{
		if (!!(((*c).prevsize == ((NI) 0)))) goto LA14;
{		Basechunk29438* le = ((Basechunk29438*) ((NI)((NU64)(((NI) (c))) - (NU64)((*c).prevsize))));
		{
			NIM_BOOL LOC18;
			LOC18 = 0;
			LOC18 = isaccessible_32016((&a), ((void*) (le)));
			if (!(LOC18)) goto LA19;
			LOC18 = chunkunused_31089(le);
			LA19: ;
			if (!LOC18) goto LA20;
{			{
				NIM_BOOL LOC24;
				LOC24 = 0;
				LOC24 = issmallchunk_31069(le);
				if (!!(LOC24)) goto LA25;
{				listremove_33002(a.freechunkslist, ((Bigchunk29442*) (le)));
				(*le).size += (*c).size;
				excl_30774(a.chunkstarts, pageindex_31170(c));
				c = ((Bigchunk29442*) (le));
}			}
			LA25: ;
}		}
		LA20: ;
}	}
	LA14: ;
	{
		NIM_BOOL LOC29;
		LOC29 = 0;
		LOC29 = ((*c).size < ((NI) 1048576));
		if (LOC29) goto LA30;
		LOC29 = NIM_FALSE;
		LA30: ;
		if (!LOC29) goto LA31;
{		incl_30761(a, a.chunkstarts, pageindex_31170(c));
		updateprevsize_32069(a, c, (*c).size);
		listadd_34225(a.freechunkslist, c);
		(*c).used = NIM_FALSE;
}	}
	goto LA27;
	LA31: ;
	{
		freeoschunks_31807(a, ((void*) (c)), (*c).size);
	}
	LA27: ;
}

static N_INLINE(void, deallocavlnode_30403)(Memregion29488& a, Avlnode29486* n) {
	(*n).link[(((NI) 0))- 0] = a.freeavlnodes;
	a.freeavlnodes = n;
}

N_NIMCALL(void, del_30603)(Memregion29488& a, Avlnode29486*& t, NI x) {
{	{
		if (!(t == bottom_29520)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	a.last = t;
	{
		if (!((NU64)(x) < (NU64)((*t).key))) goto LA7;
{		del_30603(a, (*t).link[(((NI) 0))- 0], x);
}	}
	goto LA5;
	LA7: ;
	{
		a.deleted = t;
		del_30603(a, (*t).link[(((NI) 1))- 0], x);
	}
	LA5: ;
	{
		NIM_BOOL LOC12;
		NIM_BOOL LOC13;
		LOC12 = 0;
		LOC13 = 0;
		LOC13 = (t == a.last);
		if (!(LOC13)) goto LA14;
		LOC13 = !((a.deleted == bottom_29520));
		LA14: ;
		LOC12 = LOC13;
		if (!(LOC12)) goto LA15;
		LOC12 = (x == (*a.deleted).key);
		LA15: ;
		if (!LOC12) goto LA16;
{		(*a.deleted).key = (*t).key;
		(*a.deleted).upperbound = (*t).upperbound;
		a.deleted = bottom_29520;
		t = (*t).link[(((NI) 1))- 0];
		deallocavlnode_30403(a, a.last);
}	}
	goto LA10;
	LA16: ;
	{
		NIM_BOOL LOC19;
		LOC19 = 0;
		LOC19 = ((*(*t).link[(((NI) 0))- 0]).level < (NI)((*t).level - ((NI) 1)));
		if (LOC19) goto LA20;
		LOC19 = ((*(*t).link[(((NI) 1))- 0]).level < (NI)((*t).level - ((NI) 1)));
		LA20: ;
		if (!LOC19) goto LA21;
{		(*t).level -= ((NI) 1);
		{
			if (!((*t).level < (*(*t).link[(((NI) 1))- 0]).level)) goto LA25;
{			(*(*t).link[(((NI) 1))- 0]).level = (*t).level;
}		}
		LA25: ;
		skew_30534(t);
		skew_30534((*t).link[(((NI) 1))- 0]);
		skew_30534((*(*t).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]);
		split_30539(t);
		split_30539((*t).link[(((NI) 1))- 0]);
}	}
	goto LA10;
	LA21: ;
	LA10: ;
	}BeforeRet: ;
}

N_NIMCALL(void, rawdealloc_43018)(Memregion29488& a, void* p) {
	Basechunk29438* c_43201 = pageaddr_31180(p);
	{
		if (!issmallchunk_31069(c_43201)) goto LA3;
{		Smallchunk29440* c = ((Smallchunk29440*) (c_43201));
		NI s = (*c).size;
		Freecell29430* f = ((Freecell29430*) (p));
		(*f).zerofield = ((NI) 0);
		(*f).next = (*c).freelist;
		(*c).freelist = f;
		{
			if (!((*c).free < s)) goto LA7;
{			listadd_37616(a.freesmallchunks[((NI)(s / ((NI) 8)))- 0], c);
			(*c).free += s;
}		}
		goto LA5;
		LA7: ;
		{
			(*c).free += s;
			{
				if (!((*c).free == (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))))) goto LA12;
{				listremove_40402(a.freesmallchunks[((NI)(s / ((NI) 8)))- 0], c);
				(*c).size = ((NI) 4096);
				freebigchunk_32203(a, ((Bigchunk29442*) (c)));
}			}
			LA12: ;
		}
		LA5: ;
}	}
	goto LA1;
	LA3: ;
	{
		Bigchunk29442* c = ((Bigchunk29442*) (c_43201));
		a.deleted = bottom_29520;
		del_30603(a, a.root, ((NI) ((&(*c).data))));
		freebigchunk_32203(a, c);
	}
	LA1: ;
}

N_NIMCALL(void, dealloc_46023)(Memregion29488& allocator, void* p) {
	void* x = ((void*) ((NI)((NU64)(((NI) (p))) - (NU64)(((NI)sizeof(Freecell29430))))));
	rawdealloc_43018(allocator, x);
}

N_NOCONV(void, dealloc_7448)(void* p) {
	dealloc_46023(gch_49659.region, p);
}

static N_INLINE(void, add_47384)(Cellseq47322& s, Cell47306* c) {
	{
		void* LOC5;
		if (!(s.cap <= s.len)) goto LA3;
{		s.cap = (NI)((NI)(s.cap * ((NI) 3)) / ((NI) 2));
		LOC5 = 0;
		LOC5 = alloc_7401(((NI) ((NI)(s.cap * ((NI) 8)))));
		Cell47306** d = ((Cell47306**) (LOC5));
		memcpy(((void*) (d)), ((void*) (s.d)), ((NI) ((NI)(s.len * ((NI) 8)))));
		dealloc_7448(((void*) (s.d)));
		s.d = d;
}	}
	LA3: ;
	s.d[(s.len)- 0] = c;
	s.len += ((NI) 1);
}

static N_INLINE(void, gcmark_70416)(Gcheap49618& gch, void* p) {
	Cell47306* cell = usrtocell_51241(p);
	NI c = ((NI) (cell));
	{
		void* LOC5;
		if (!((NU64)(((NI) 4096)) < (NU64)(c))) goto LA3;
{		LOC5 = 0;
		LOC5 = interiorallocatedptr_44692((&gch.region), ((void*) (cell)));
		Cell47306* objstart = ((Cell47306*) (LOC5));
		{
			if (!!((objstart == NIM_NIL))) goto LA8;
{			(*objstart).refcount = (NI)((NU64)((*objstart).refcount) + (NU64)(((NI) 8)));
			add_47384(gch.decstack, objstart);
}		}
		LA8: ;
}	}
	LA3: ;
}

N_CDECL(void, markstackandregisters_72637)(Gcheap49618& gch) {
	jmp_buf registers;
	{
		int LOC3;
		LOC3 = 0;
		LOC3 = setjmp(registers);
		if (!(LOC3 == ((NI32) 0))) goto LA4;
{		NI max = ((NI) (gch.stackbottom));
		NI sp = ((NI) ((&registers)));
		NI regend = (NI)((NU64)(sp) + (NU64)(((NI)sizeof(jmp_buf))));
		{
			while (1) {
				if (!((NU64)(sp) < (NU64)(regend))) goto LA7;
				gcmark_70416(gch, (*((void**) (sp))));
				gcmark_70416(gch, (*((void**) ((NI)((NU64)(sp) + (NU64)(((NI) 4)))))));
				sp = (NI)((NU64)(sp) + (NU64)(((NI) 8)));
			} LA7: ;
		}
		sp = (NI)(sp & ((NI) -8));
		{
			while (1) {
				if (!((NU64)(sp) < (NU64)((NI)(max - ((NI) 64))))) goto LA9;
				gcmark_70416(gch, ((void**) (sp))[(((NI) 0))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 1))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 2))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 3))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 4))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 5))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 6))- 0]);
				gcmark_70416(gch, ((void**) (sp))[(((NI) 7))- 0]);
				sp = (NI)((NU64)(sp) + (NU64)(((NI) 64)));
			} LA9: ;
		}
		{
			while (1) {
				if (!((NU64)(sp) <= (NU64)(max))) goto LA11;
				gcmark_70416(gch, (*((void**) (sp))));
				sp = (NI)((NU64)(sp) + (NU64)(((NI) 8)));
			} LA11: ;
		}
}	}
	LA4: ;
}

N_NIMCALL(void, markthreadstacks_71003)(Gcheap49618& gch) {
}

static N_INLINE(NIM_BOOL, canbecycleroot_51259)(Cell47306* c) {
	NIM_BOOL result;
	result = 0;
	result = !((((*(*c).typ).flags &(1U<<((NU)(((NU8) 1))&7U)))!=0));
	return result;
}

static N_INLINE(NI, nexttry_47446)(NI h, NI maxhash) {
	NI result;
	result = 0;
	result = (NI)((NI)((NI)(((NI) 5) * h) + ((NI) 1)) & maxhash);
	return result;
}

N_NIMCALL(Pagedesc47314*, cellsetget_47451)(Cellset47318* t, NI key) {
	Pagedesc47314* result;
{	result = 0;
	NI h = (NI)(((NI) (key)) & (*t).max);
	{
		while (1) {
			if (!!(((*t).data[(h)- 0] == NIM_NIL))) goto LA2;
			{
				if (!((*(*t).data[(h)- 0]).key == key)) goto LA5;
{				result = (*t).data[(h)- 0];
				goto BeforeRet;
}			}
			LA5: ;
			h = nexttry_47446(h, (*t).max);
		} LA2: ;
	}
	result = NIM_NIL;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void, excl_48075)(Cellset47318& s, Cell47306* cell) {
	NI u = ((NI) (cell));
	Pagedesc47314* t = cellsetget_47451((&s), (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	{
		if (!!((t == NIM_NIL))) goto LA3;
{		u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		(*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63)))))))));
}	}
	LA3: ;
}

static N_INLINE(void*, celltousr_51223)(Cell47306* cell) {
	void* result;
	result = 0;
	result = ((void*) ((NI)((NU64)(((NI) (cell))) + (NU64)(((NI)sizeof(Cell47306))))));
	return result;
}

N_NIMCALL(void, preparedealloc_51808)(Cell47306* cell) {
	{
		if (!!(((*(*cell).typ).finalizer == NIM_NIL))) goto LA3;
{		gch_49659.recgclock += ((NI) 1);
		((Finalizer) ((*(*cell).typ).finalizer))(celltousr_51223(cell));
		gch_49659.recgclock -= ((NI) 1);
}	}
	LA3: ;
}

N_NOINLINE(void, addzct_51217)(Cellseq47322& s, Cell47306* c) {
	{
		if (!((NI)((*c).refcount & ((NI) 4)) == ((NI) 0))) goto LA3;
{		(*c).refcount = (NI)((*c).refcount | ((NI) 4));
		add_47384(s, c);
}	}
	LA3: ;
}

static N_INLINE(void, rtladdzct_52801)(Cell47306* c) {
	addzct_51217(gch_49659.zct, c);
}

N_NIMCALL(void, cellsetrawinsert_47471)(Cellset47318* t, Pagedesc47314** data, Pagedesc47314* desc) {
	NI h = (NI)(((NI) ((*desc).key)) & (*t).max);
	{
		while (1) {
			if (!!((data[(h)- 0] == NIM_NIL))) goto LA2;
			h = nexttry_47446(h, (*t).max);
		} LA2: ;
	}
	data[(h)- 0] = desc;
}

N_NIMCALL(void, cellsetenlarge_47803)(Cellset47318& t) {
	void* LOC1;
	NI oldmax = t.max;
	t.max = (NI)((NI)((NI)(t.max + ((NI) 1)) * ((NI) 2)) - ((NI) 1));
	LOC1 = 0;
	LOC1 = alloc0_7417(((NI) ((NI)((NI)(t.max + ((NI) 1)) * ((NI) 8)))));
	Pagedesc47314** n = ((Pagedesc47314**) (LOC1));
	{
		NI i_47819;
		i_47819 = 0;
		NI res_47837 = ((NI) 0);
		{
			while (1) {
				if (!(res_47837 <= oldmax)) goto LA4;
				i_47819 = res_47837;
				{
					if (!!((t.data[(i_47819)- 0] == NIM_NIL))) goto LA7;
{					cellsetrawinsert_47471((&t), n, t.data[(i_47819)- 0]);
}				}
				LA7: ;
				res_47837 += ((NI) 1);
			} LA4: ;
		}
	}
	dealloc_7448(((void*) (t.data)));
	t.data = n;
}

N_NIMCALL(Pagedesc47314*, cellsetput_47841)(Cellset47318& t, NI key) {
	Pagedesc47314* result;
	void* LOC19;
{	result = 0;
	NI h = (NI)(((NI) (key)) & t.max);
	{
		while (1) {
			Pagedesc47314* x = t.data[(h)- 0];
			{
				if (!(x == NIM_NIL)) goto LA5;
{				goto LA1;
}			}
			LA5: ;
			{
				if (!((*x).key == key)) goto LA9;
{				result = x;
				goto BeforeRet;
}			}
			LA9: ;
			h = nexttry_47446(h, t.max);
		}
	} LA1: ;
	{
		NIM_BOOL LOC13;
		LOC13 = 0;
		LOC13 = ((NI)((NI)(t.max + ((NI) 1)) * ((NI) 2)) < (NI)(t.counter * ((NI) 3)));
		if (LOC13) goto LA14;
		LOC13 = ((NI)((NI)(t.max + ((NI) 1)) - t.counter) < ((NI) 4));
		LA14: ;
		if (!LOC13) goto LA15;
{		cellsetenlarge_47803(t);
}	}
	LA15: ;
	t.counter += ((NI) 1);
	h = (NI)(((NI) (key)) & t.max);
	{
		while (1) {
			if (!!((t.data[(h)- 0] == NIM_NIL))) goto LA18;
			h = nexttry_47446(h, t.max);
		} LA18: ;
	}
	LOC19 = 0;
	LOC19 = alloc0_7417(((NI) (((NI)sizeof(Pagedesc47314)))));
	result = ((Pagedesc47314*) (LOC19));
	(*result).next = t.head;
	(*result).key = key;
	t.head = result;
	t.data[(h)- 0] = result;
	}BeforeRet: ;
	return result;
}

N_NOINLINE(void, incl_48047)(Cellset47318& s, Cell47306* cell) {
	NI u = ((NI) (cell));
	Pagedesc47314* t = cellsetput_47841(s, (NI)((NU64)(u) >> (NU64)(((NI) 12))));
	u = (NI)((NU64)((NI)((NU64)(u) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
	(*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] = (NI)((*t).bits[((NI)((NU64)(u) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u & ((NI) 63)))))));
}

static N_INLINE(void, rtladdcycleroot_52020)(Cell47306* c) {
	{
		if (!!((((NI) ((NI)((*c).refcount & ((NI) 3)))) == ((NI) 3)))) goto LA3;
{		(*c).refcount = (NI)((NI)((*c).refcount & ((NI) -4)) | ((NI) 3));
		incl_48047(gch_49659.cycleroots, c);
}	}
	LA3: ;
}

static N_INLINE(void, decref_53201)(Cell47306* c) {
	{
		(*c).refcount -= ((NI) 8);
		if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		rtladdzct_52801(c);
}	}
	goto LA1;
	LA3: ;
	{
		if (!canbecycleroot_51259(c)) goto LA6;
{		rtladdcycleroot_52020(c);
}	}
	goto LA1;
	LA6: ;
	LA1: ;
}

N_NIMCALL(void, markgray_66802)(Cell47306* s) {
	{
		if (!!((((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 1)))) goto LA3;
{		(*s).refcount = (NI)((NI)((*s).refcount & ((NI) -4)) | ((NI) 1));
		forallchildren_51614(s, ((NU8) 5));
}	}
	LA3: ;
}

N_NIMCALL(void, scanblack_67001)(Cell47306* s) {
	(*s).refcount = (NI)((*s).refcount & ((NI) -4));
	forallchildren_51614(s, ((NU8) 7));
}

N_NIMCALL(void, scan_67201)(Cell47306* s) {
	{
		if (!(((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 1))) goto LA3;
{		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*s).refcount))) goto LA7;
{			scanblack_67001(s);
}		}
		goto LA5;
		LA7: ;
		{
			(*s).refcount = (NI)((NI)((*s).refcount & ((NI) -4)) | ((NI) 2));
			forallchildren_51614(s, ((NU8) 6));
		}
		LA5: ;
}	}
	LA3: ;
}

N_NIMCALL(NIM_BOOL, isallocatedptr_36402)(Memregion29488* a, void* p) {
	NIM_BOOL result;
	result = 0;
	{
		if (!isaccessible_32016(a, p)) goto LA3;
{		Basechunk29438* c_44613 = pageaddr_31180(p);
		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = chunkunused_31089(c_44613);
			if (!!(LOC7)) goto LA8;
{			{
				NIM_BOOL LOC14;
				NIM_BOOL LOC15;
				if (!issmallchunk_31069(c_44613)) goto LA12;
{				Smallchunk29440* c = ((Smallchunk29440*) (c_44613));
				NI offset = (NI)((NU64)(((NI) ((NI)(((NI) (p)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Smallchunk29440)) - ((NI) 8))));
				LOC14 = 0;
				LOC15 = 0;
				LOC15 = ((NU64)(offset) < (NU64)((*c).acc));
				if (!(LOC15)) goto LA16;
				LOC15 = ((NI)((NU64)(offset) % (NU64)((*c).size)) == ((NI) 0));
				LA16: ;
				LOC14 = LOC15;
				if (!(LOC14)) goto LA17;
				LOC14 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell29430*) (p))).zerofield));
				LA17: ;
				result = LOC14;
}			}
			goto LA10;
			LA12: ;
			{
				NIM_BOOL LOC19;
				Bigchunk29442* c = ((Bigchunk29442*) (c_44613));
				LOC19 = 0;
				LOC19 = (p == ((void*) ((&(*c).data))));
				if (!(LOC19)) goto LA20;
				LOC19 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell29430*) (p))).zerofield));
				LA20: ;
				result = LOC19;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	LA3: ;
	return result;
}

N_NIMCALL(void, freecycliccell_66015)(Gcheap49618& gch, Cell47306* c) {
	preparedealloc_51808(c);
	rawdealloc_43018(gch.region, ((void*) (c)));
}

N_NIMCALL(void, collectwhite_67401)(Cell47306* s) {
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isallocatedptr_36402((&gch_49659.region), ((void*) (s)));
		if (!(LOC3)) goto LA4;
		LOC3 = (((NI) ((NI)((*s).refcount & ((NI) 3)))) == ((NI) 2));
		LA4: ;
		if (!LOC3) goto LA5;
{		(*s).refcount = (NI)((*s).refcount & ((NI) -4));
		forallchildren_51614(s, ((NU8) 8));
		freecycliccell_66015(gch_49659, s);
}	}
	LA5: ;
}

N_NIMCALL(void, dooperation_51618)(void* p, NU8 op) {
{	{
		if (!(p == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	Cell47306* c = usrtocell_51241(p);
	switch (op) {
	case ((NU8) 2):
	{
		decref_53201(c);
	}
	break;
	case ((NU8) 3):
	{
		add_47384(gch_49659.tempstack, c);
	}
	break;
	case ((NU8) 4):
	{
		(*c).refcount = (NI)((NU64)((*c).refcount) - (NU64)(((NI) 8)));
	}
	break;
	case ((NU8) 5):
	{
		(*c).refcount = (NI)((NU64)((*c).refcount) - (NU64)(((NI) 8)));
		markgray_66802(c);
	}
	break;
	case ((NU8) 6):
	{
		scan_67201(c);
	}
	break;
	case ((NU8) 7):
	{
		(*c).refcount = (NI)((NU64)((*c).refcount) + (NU64)(((NI) 8)));
		{
			if (!!((((NI) ((NI)((*c).refcount & ((NI) 3)))) == ((NI) 0)))) goto LA13;
{			scanblack_67001(c);
}		}
		LA13: ;
	}
	break;
	case ((NU8) 8):
	{
		collectwhite_67401(c);
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
	}
	break;
	}
	}BeforeRet: ;
}

N_NIMCALL(NI, getdiscriminant_27004)(void* aa, TNimNode* n) {
	NI result;
	NI d;
{	result = 0;
	d = 0;
	NI a = ((NI) (aa));
	switch ((*(*n).typ).size) {
	case ((NI) 1):
	{
		d = ((NI)(NU)(NU8)((*((NI8*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	case ((NI) 2):
	{
		d = ((NI)(NU)(NU16)((*((NI16*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	case ((NI) 4):
	{
		d = ((NI) ((*((NI32*) ((NI)((NU64)(a) + (NU64)((*n).offset)))))));
	}
	break;
	default:
	{
	}
	break;
	}
	result = d;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(TNimNode*, selectbranch_27407)(void* aa, TNimNode* n) {
	TNimNode* result;
	result = 0;
	NI discr = getdiscriminant_27004(aa, n);
	{
		if (!((NU64)(discr) < (NU64)((*n).len))) goto LA3;
{		result = (*n).sons[(discr)- 0];
		{
			if (!(result == NIM_NIL)) goto LA7;
{			result = (*n).sons[((*n).len)- 0];
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		result = (*n).sons[((*n).len)- 0];
	}
	LA1: ;
	return result;
}

N_NIMCALL(void, forallslotsaux_55807)(void* dest, TNimNode* n, NU8 op) {
	NI d = ((NI) (dest));
	switch ((*n).kind) {
	case ((NU8) 1):
	{
		forallchildrenaux_51622(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), (*n).typ, op);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_55832;
			NI HEX3Atmp_56006;
			i_55832 = 0;
			HEX3Atmp_56006 = 0;
			HEX3Atmp_56006 = (NI)((*n).len - ((NI) 1));
			NI res_56009 = ((NI) 0);
			{
				while (1) {
					if (!(res_56009 <= HEX3Atmp_56006)) goto LA5;
					i_55832 = res_56009;
					{
						if (!((*(*n).sons[(i_55832)- 0]).kind == ((NU8) 1))) goto LA8;
{						{
							if (!((289406976 &((NU64)1<<((NU)((*(*(*n).sons[(i_55832)- 0]).typ).kind)&63U)))!=0)) goto LA12;
{							dooperation_51618((*((void**) ((NI)((NU64)(d) + (NU64)((*(*n).sons[(i_55832)- 0]).offset))))), op);
}						}
						goto LA10;
						LA12: ;
						{
							forallchildrenaux_51622(((void*) ((NI)((NU64)(d) + (NU64)((*(*n).sons[(i_55832)- 0]).offset)))), (*(*n).sons[(i_55832)- 0]).typ, op);
						}
						LA10: ;
}					}
					goto LA6;
					LA8: ;
					{
						forallslotsaux_55807(dest, (*n).sons[(i_55832)- 0], op);
					}
					LA6: ;
					res_56009 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		TNimNode* m = selectbranch_27407(dest, n);
		{
			if (!!((m == NIM_NIL))) goto LA19;
{			forallslotsaux_55807(dest, m, op);
}		}
		LA19: ;
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	}
}

N_NIMCALL(void, forallchildrenaux_51622)(void* dest, TNimType* mt, NU8 op) {
{	NI d = ((NI) (dest));
	{
		if (!(dest == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!!((((*mt).flags &(1U<<((NU)(((NU8) 0))&7U)))!=0))) goto LA7;
{		switch ((*mt).kind) {
		case ((NU8) 22):
		case ((NU8) 28):
		case ((NU8) 24):
		{
			dooperation_51618((*((void**) (d))), op);
		}
		break;
		case ((NU8) 17):
		case ((NU8) 18):
		{
			forallslotsaux_55807(dest, (*mt).node, op);
		}
		break;
		case ((NU8) 16):
		case ((NU8) 4):
		case ((NU8) 27):
		{
			{
				NI i_56038;
				NI HEX3Atmp_56061;
				i_56038 = 0;
				HEX3Atmp_56061 = 0;
				HEX3Atmp_56061 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
				NI res_56064 = ((NI) 0);
				{
					while (1) {
						if (!(res_56064 <= HEX3Atmp_56061)) goto LA14;
						i_56038 = res_56064;
						forallchildrenaux_51622(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_56038) * (NU64)((*(*mt).base).size)))))), (*mt).base, op);
						res_56064 += ((NI) 1);
					} LA14: ;
				}
			}
		}
		break;
		default:
		{
		}
		break;
		}
}	}
	LA7: ;
	}BeforeRet: ;
}

N_NIMCALL(void, forallchildren_51614)(Cell47306* cell, NU8 op) {
	TY3489 marker = (*(*cell).typ).marker;
	{
		if (!!((marker == NIM_NIL))) goto LA3;
{		marker(celltousr_51223(cell), ((NI) (op)));
}	}
	goto LA1;
	LA3: ;
	{
		switch ((*(*cell).typ).kind) {
		case ((NU8) 22):
		{
			forallchildrenaux_51622(celltousr_51223(cell), (*(*cell).typ).base, op);
		}
		break;
		case ((NU8) 24):
		{
			void* LOC8;
			LOC8 = 0;
			LOC8 = celltousr_51223(cell);
			NI d = ((NI) (LOC8));
			TGenericSeq* s = ((TGenericSeq*) (d));
			{
				if (!!((s == NIM_NIL))) goto LA11;
{				{
					NI i_56834;
					NI HEX3Atmp_56867;
					i_56834 = 0;
					HEX3Atmp_56867 = 0;
					HEX3Atmp_56867 = (NI)((*s).len - ((NI) 1));
					NI res_56870 = ((NI) 0);
					{
						while (1) {
							if (!(res_56870 <= HEX3Atmp_56867)) goto LA15;
							i_56834 = res_56870;
							forallchildrenaux_51622(((void*) ((NI)((NU64)((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_56834) * (NU64)((*(*(*cell).typ).base).size))))) + (NU64)(((NI) 16))))), (*(*cell).typ).base, op);
							res_56870 += ((NI) 1);
						} LA15: ;
					}
				}
}			}
			LA11: ;
		}
		break;
		default:
		{
		}
		break;
		}
	}
	LA1: ;
}

N_NIMCALL(NIM_BOOL, collectzct_69806)(Gcheap49618& gch) {
	NIM_BOOL result;
	result = 0;
	NI* L = (&gch.zct.len);
	{
		while (1) {
			if (!(((NI) 0) < (*L))) goto LA2;
			Cell47306* c = gch.zct.d[(((NI) 0))- 0];
			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			gch.zct.d[(((NI) 0))- 0] = gch.zct.d[((NI)((*L) - ((NI) 1)))- 0];
			(*L) -= ((NI) 1);
			{
				if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA5;
{				{
					if (!canbecycleroot_51259(c)) goto LA9;
{					excl_48075(gch.cycleroots, c);
}				}
				LA9: ;
				preparedealloc_51808(c);
				forallchildren_51614(c, ((NU8) 2));
				rawdealloc_43018(gch.region, ((void*) (c)));
}			}
			LA5: ;
		} LA2: ;
	}
	result = NIM_TRUE;
	return result;
}

N_NIMCALL(void, markroots_67602)(Gcheap49618& gch) {
	NI tabsize = ((NI) 0);
	{
		Cell47306* s_67607;
		Cellset47318 HEX3Atmp_67635;
		s_67607 = 0;
		memset((void*)(&HEX3Atmp_67635), 0, sizeof(HEX3Atmp_67635));
		HEX3Atmp_67635 = gch.cycleroots;
		Pagedesc47314* r_67640 = HEX3Atmp_67635.head;
		{
			while (1) {
				if (!!((r_67640 == NIM_NIL))) goto LA3;
				NI i_67642 = ((NI) 0);
				{
					while (1) {
						if (!(i_67642 <= ((NI) 7))) goto LA5;
						NI w_67644 = (*r_67640).bits[(i_67642)- 0];
						NI j_67646 = ((NI) 0);
						{
							while (1) {
								if (!!((w_67644 == ((NI) 0)))) goto LA7;
								{
									if (!!((((NI) ((NI)(w_67644 & ((NI) 1)))) == ((NI) 0)))) goto LA10;
{									s_67607 = ((Cell47306*) ((NI)((NI)((NU64)((*r_67640).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_67642) << (NU64)(((NI) 6)))) + (NU64)(j_67646))) * (NU64)(((NI) 8))))));
									tabsize += ((NI) 1);
									{
										NIM_BOOL LOC14;
										LOC14 = 0;
										LOC14 = (((NI) ((NI)((*s_67607).refcount & ((NI) 3)))) == ((NI) 3));
										if (!(LOC14)) goto LA15;
										LOC14 = ((NU64)(((NI) 8)) <= (NU64)((*s_67607).refcount));
										LA15: ;
										if (!LOC14) goto LA16;
{										markgray_66802(s_67607);
}									}
									goto LA12;
									LA16: ;
									{
										excl_48075(gch.cycleroots, s_67607);
										{
											if (!((*s_67607).refcount == ((NI) 0))) goto LA21;
{											freecycliccell_66015(gch, s_67607);
}										}
										LA21: ;
									}
									LA12: ;
}								}
								LA10: ;
								j_67646 += ((NI) 1);
								w_67644 = (NI)((NU64)(w_67644) >> (NU64)(((NI) 1)));
							} LA7: ;
						}
						i_67642 += ((NI) 1);
					} LA5: ;
				}
				r_67640 = (*r_67640).next;
			} LA3: ;
		}
	}
	gch.stat.cycletablesize = ((gch.stat.cycletablesize >= tabsize) ? gch.stat.cycletablesize : tabsize);
}

N_NIMCALL(void, collectroots_70001)(Gcheap49618& gch) {
	{
		Cell47306* s_70005;
		Cellset47318 HEX3Atmp_70007;
		s_70005 = 0;
		memset((void*)(&HEX3Atmp_70007), 0, sizeof(HEX3Atmp_70007));
		HEX3Atmp_70007 = gch.cycleroots;
		Pagedesc47314* r_70012 = HEX3Atmp_70007.head;
		{
			while (1) {
				if (!!((r_70012 == NIM_NIL))) goto LA3;
				NI i_70014 = ((NI) 0);
				{
					while (1) {
						if (!(i_70014 <= ((NI) 7))) goto LA5;
						NI w_70016 = (*r_70012).bits[(i_70014)- 0];
						NI j_70018 = ((NI) 0);
						{
							while (1) {
								if (!!((w_70016 == ((NI) 0)))) goto LA7;
								{
									if (!!((((NI) ((NI)(w_70016 & ((NI) 1)))) == ((NI) 0)))) goto LA10;
{									s_70005 = ((Cell47306*) ((NI)((NI)((NU64)((*r_70012).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_70014) << (NU64)(((NI) 6)))) + (NU64)(j_70018))) * (NU64)(((NI) 8))))));
									collectwhite_67401(s_70005);
}								}
								LA10: ;
								j_70018 += ((NI) 1);
								w_70016 = (NI)((NU64)(w_70016) >> (NU64)(((NI) 1)));
							} LA7: ;
						}
						i_70014 += ((NI) 1);
					} LA5: ;
				}
				r_70012 = (*r_70012).next;
			} LA3: ;
		}
	}
}

N_NIMCALL(void, deinit_47427)(Cellset47318& s) {
	Pagedesc47314* it = s.head;
	{
		while (1) {
			if (!!((it == NIM_NIL))) goto LA2;
			Pagedesc47314* n = (*it).next;
			dealloc_7448(((void*) (it)));
			it = n;
		} LA2: ;
	}
	s.head = NIM_NIL;
	dealloc_7448(((void*) (s.data)));
	s.data = NIM_NIL;
	s.counter = ((NI) 0);
}

N_NIMCALL(void, cellsetreset_55801)(Cellset47318& s) {
	deinit_47427(s);
	init_47419(s);
}

N_NIMCALL(void, collectcycles_70020)(Gcheap49618& gch) {
	{
		while (1) {
			NIM_BOOL LOC3;
			if (!(((NI) 0) < gch.zct.len)) goto LA2;
			LOC3 = 0;
			LOC3 = collectzct_69806(gch);
		} LA2: ;
	}
	markroots_67602(gch);
	{
		Cell47306* s_70202;
		Cellset47318 HEX3Atmp_70403;
		s_70202 = 0;
		memset((void*)(&HEX3Atmp_70403), 0, sizeof(HEX3Atmp_70403));
		HEX3Atmp_70403 = gch.cycleroots;
		Pagedesc47314* r_70408 = HEX3Atmp_70403.head;
		{
			while (1) {
				if (!!((r_70408 == NIM_NIL))) goto LA6;
				NI i_70410 = ((NI) 0);
				{
					while (1) {
						if (!(i_70410 <= ((NI) 7))) goto LA8;
						NI w_70412 = (*r_70408).bits[(i_70410)- 0];
						NI j_70414 = ((NI) 0);
						{
							while (1) {
								if (!!((w_70412 == ((NI) 0)))) goto LA10;
								{
									if (!!((((NI) ((NI)(w_70412 & ((NI) 1)))) == ((NI) 0)))) goto LA13;
{									s_70202 = ((Cell47306*) ((NI)((NI)((NU64)((*r_70408).key) << (NU64)(((NI) 12))) | (NI)((NU64)((NI)((NU64)((NI)((NU64)(i_70410) << (NU64)(((NI) 6)))) + (NU64)(j_70414))) * (NU64)(((NI) 8))))));
									scan_67201(s_70202);
}								}
								LA13: ;
								j_70414 += ((NI) 1);
								w_70412 = (NI)((NU64)(w_70412) >> (NU64)(((NI) 1)));
							} LA10: ;
						}
						i_70410 += ((NI) 1);
					} LA8: ;
				}
				r_70408 = (*r_70408).next;
			} LA6: ;
		}
	}
	collectroots_70001(gch);
	cellsetreset_55801(gch.cycleroots);
}

N_NIMCALL(NI, gettotalmem_8059)(void) {
	NI result;
{	result = 0;
	result = gch_49659.region.currmem;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI, getfreemem_8057)(void) {
	NI result;
	result = 0;
	result = gch_49659.region.freemem;
	return result;
}

N_NIMCALL(NI, getoccupiedmem_8055)(void) {
	NI result;
	NI LOC1;
	NI LOC2;
{	result = 0;
	LOC1 = 0;
	LOC1 = gettotalmem_8059();
	LOC2 = 0;
	LOC2 = getfreemem_8057();
	result = (NI)(LOC1 - LOC2);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void, unmarkstackandregisters_75002)(Gcheap49618& gch) {
	Cell47306** d = gch.decstack.d;
	{
		NI i_75016;
		NI HEX3Atmp_75202;
		i_75016 = 0;
		HEX3Atmp_75202 = 0;
		HEX3Atmp_75202 = (NI)(gch.decstack.len - ((NI) 1));
		NI res_75205 = ((NI) 0);
		{
			while (1) {
				if (!(res_75205 <= HEX3Atmp_75202)) goto LA3;
				i_75016 = res_75205;
				decref_53201(d[(i_75016)- 0]);
				res_75205 += ((NI) 1);
			} LA3: ;
		}
	}
	gch.decstack.len = ((NI) 0);
}

N_NIMCALL(void, collectctbody_75209)(Gcheap49618& gch) {
	NI LOC1;
	LOC1 = 0;
	LOC1 = stacksize_71401();
	gch.stat.maxstacksize = ((gch.stat.maxstacksize >= LOC1) ? gch.stat.maxstacksize : LOC1);
	prepareforinteriorpointerchecking_44688(gch.region);
	markstackandregisters_72637(gch);
	markthreadstacks_71003(gch);
	gch.stat.maxstackcells = ((gch.stat.maxstackcells >= gch.decstack.len) ? gch.stat.maxstackcells : gch.decstack.len);
	gch.stat.stackscans += ((NI) 1);
	{
		if (!collectzct_69806(gch)) goto LA4;
{		{
			NIM_BOOL LOC8;
			NI LOC9;
			NI LOC13;
			LOC8 = 0;
			LOC9 = 0;
			LOC9 = getoccupiedmem_47231((&gch.region));
			LOC8 = (gch.cyclethreshold <= LOC9);
			if (LOC8) goto LA10;
			LOC8 = NIM_FALSE;
			LA10: ;
			if (!LOC8) goto LA11;
{			collectcycles_70020(gch);
			gch.stat.cyclecollections += ((NI) 1);
			LOC13 = 0;
			LOC13 = getoccupiedmem_8055();
			gch.cyclethreshold = ((((NI) 4194304) >= (NI)(LOC13 * ((NI) 2))) ? ((NI) 4194304) : (NI)(LOC13 * ((NI) 2)));
			gch.stat.maxthreshold = ((gch.stat.maxthreshold >= gch.cyclethreshold) ? gch.stat.maxthreshold : gch.cyclethreshold);
}		}
		LA11: ;
}	}
	LA4: ;
	unmarkstackandregisters_75002(gch);
}

N_NIMCALL(void, collectct_51607)(Gcheap49618& gch) {
	NI LOC1;
	LOC1 = 0;
	LOC1 = stacksize_71401();
	NI stackmarkcosts = (((NI)(LOC1 / ((NI) 128)) >= ((NI) 500)) ? (NI)(LOC1 / ((NI) 128)) : ((NI) 500));
	{
		NIM_BOOL LOC4;
		NIM_BOOL LOC5;
		NIM_BOOL LOC6;
		NIM_BOOL LOC8;
		NI LOC10;
		LOC4 = 0;
		LOC5 = 0;
		LOC6 = 0;
		LOC6 = (stackmarkcosts <= gch.zct.len);
		if (LOC6) goto LA7;
		LOC8 = 0;
		LOC8 = NIM_TRUE;
		if (!(LOC8)) goto LA9;
		LOC10 = 0;
		LOC10 = getoccupiedmem_47231((&gch.region));
		LOC8 = (gch.cyclethreshold <= LOC10);
		LA9: ;
		LOC6 = LOC8;
		LA7: ;
		LOC5 = LOC6;
		if (LOC5) goto LA11;
		LOC5 = NIM_FALSE;
		LA11: ;
		LOC4 = LOC5;
		if (!(LOC4)) goto LA12;
		LOC4 = (gch.recgclock == ((NI) 0));
		LA12: ;
		if (!LOC4) goto LA13;
{		collectctbody_75209(gch);
}	}
	LA13: ;
}

static N_INLINE(void, addnewobjtozct_56874)(Cell47306* res, Gcheap49618& gch) {
{	NI L = gch.zct.len;
	Cell47306** d = gch.zct.d;
	{
		Cell47306* c;
		if (!(((NI) 8) < L)) goto LA3;
{		c = 0;
		c = d[((NI)(L - ((NI) 1)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA7;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 1)))- 0] = res;
			goto BeforeRet;
}		}
		LA7: ;
		c = d[((NI)(L - ((NI) 2)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA11;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 2)))- 0] = res;
			goto BeforeRet;
}		}
		LA11: ;
		c = d[((NI)(L - ((NI) 3)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA15;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 3)))- 0] = res;
			goto BeforeRet;
}		}
		LA15: ;
		c = d[((NI)(L - ((NI) 4)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA19;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 4)))- 0] = res;
			goto BeforeRet;
}		}
		LA19: ;
		c = d[((NI)(L - ((NI) 5)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA23;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 5)))- 0] = res;
			goto BeforeRet;
}		}
		LA23: ;
		c = d[((NI)(L - ((NI) 6)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA27;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 6)))- 0] = res;
			goto BeforeRet;
}		}
		LA27: ;
		c = d[((NI)(L - ((NI) 7)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA31;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 7)))- 0] = res;
			goto BeforeRet;
}		}
		LA31: ;
		c = d[((NI)(L - ((NI) 8)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c).refcount))) goto LA35;
{			(*c).refcount = (NI)((*c).refcount & ((NI) -5));
			d[((NI)(L - ((NI) 8)))- 0] = res;
			goto BeforeRet;
}		}
		LA35: ;
		add_47384(gch.zct, res);
}	}
	goto LA1;
	LA3: ;
	{
		d[(L)- 0] = res;
		gch.zct.len += ((NI) 1);
	}
	LA1: ;
	}BeforeRet: ;
}

N_NIMCALL(void*, rawnewobj_57401)(TNimType* typ, NI size, Gcheap49618& gch) {
	void* result;
	void* LOC1;
	result = 0;
	collectct_51607(gch);
	LOC1 = 0;
	LOC1 = rawalloc_36668(gch.region, (NI)(size + ((NI)sizeof(Cell47306))));
	Cell47306* res = ((Cell47306*) (LOC1));
	(*res).typ = typ;
	(*res).refcount = ((NI) 4);
	addnewobjtozct_56874(res, gch);
	result = celltousr_51223(res);
	return result;
}

N_NIMCALL(void*, newObjNoInit)(TNimType* typ, NI size) {
	void* result;
	result = 0;
	result = rawnewobj_57401(typ, size, gch_49659);
	return result;
}

N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space) {
	NimStringDesc* result;
	void* LOC5;
	result = 0;
	NI s = space;
	{
		if (!(s < ((NI) 7))) goto LA3;
{		s = ((NI) 7);
}	}
	LA3: ;
	LOC5 = 0;
	LOC5 = newObjNoInit((&strdesc_12203), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
	result = ((NimStringDesc*) (LOC5));
	(*result).reserved = s;
	return result;
}

N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str, NI len) {
	NimStringDesc* result;
	result = 0;
	result = rawNewStringNoInit(len);
	(*result).len = len;
	memcpy(((NCSTRING) ((*result).data)), str, (NI)(len + ((NI) 1)));
	return result;
}

N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str) {
	NimStringDesc* result;
	result = 0;
	result = toNimStr(str, strlen(str));
	return result;
}

N_NIMCALL(void, write_15501)(FILE* f, NCSTRING c) {
	fputs(c, f);
}

N_NIMCALL(void, writetostderr_19401)(NCSTRING msg) {
	write_15501(stderr, msg);
}

N_NIMCALL(void, showerrormessage_19406)(NCSTRING data) {
	{
		NimStringDesc* LOC5;
		if (!!((errormessagewriter_19204 == NIM_NIL))) goto LA3;
{		LOC5 = 0;
		LOC5 = cstrToNimstr(data);
		errormessagewriter_19204(LOC5);
}	}
	goto LA1;
	LA3: ;
	{
		writetostderr_19401(data);
	}
	LA1: ;
}

N_NOCONV(void, signalHandler)(int sig) {
	NCSTRING msg;
	msg = 0;
	{
		if (!(sig == SIGINT)) goto LA3;
{		msg = "SIGINT: Interrupted by Ctrl-C.\012";
}	}
	goto LA1;
	LA3: ;
	{
		if (!(sig == SIGSEGV)) goto LA6;
{		msg = "SIGSEGV: Illegal storage access. (Attempt to read from nil?)\012";
}	}
	goto LA1;
	LA6: ;
	{
		if (!(sig == SIGABRT)) goto LA9;
{		msg = "SIGABRT: Abnormal termination.\012";
}	}
	goto LA1;
	LA9: ;
	{
		if (!(sig == SIGFPE)) goto LA12;
{		msg = "SIGFPE: Arithmetic error.\012";
}	}
	goto LA1;
	LA12: ;
	{
		if (!(sig == SIGILL)) goto LA15;
{		msg = "SIGILL: Illegal operation.\012";
}	}
	goto LA1;
	LA15: ;
	{
		if (!(sig == SIGSEGV)) goto LA18;
{		msg = "SIGBUS: Illegal storage access. (Attempt to read from nil?)\012";
}	}
	goto LA1;
	LA18: ;
	{
		{
			{
				if (!(sig == SIGPIPE)) goto LA24;
{				msg = "SIGPIPE: Pipe closed.\012";
				goto LA21;
}			}
			LA24: ;
			msg = "unknown signal\012";
		} LA21: ;
	}
	LA1: ;
	showerrormessage_19406(msg);
	exit(((NI) 1));
}

N_NIMCALL(void, registersignalhandler_22802)(void) {
	signal(SIGINT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGPIPE, signalHandler);
}

N_NIMCALL(NI, getRefcount)(void* p) {
	NI result;
	result = 0;
	result = (NI)((NU64)((*usrtocell_51241(p)).refcount) >> (NU64)(((NI) 3)));
	return result;
}

N_NIMCALL(void, nimGCvisit)(void* d, NI op) {
	dooperation_51618(d, ((NU8) (op)));
}
N_NIMCALL(void, TMP39)(void* p, NI op) {
	Exception* a;
	a = (Exception*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}
N_NIMCALL(void, TMP40)(void* p, NI op) {
	Overflowerror3640* a;
	a = (Overflowerror3640*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

N_NIMCALL(void*, newObj)(TNimType* typ, NI size) {
	void* result;
	result = 0;
	result = rawnewobj_57401(typ, size, gch_49659);
	zeroMem(result, ((NI) (size)));
	return result;
}

N_NIMCALL(void*, newObjRC1)(TNimType* typ, NI size) {
	void* result;
	void* LOC1;
	result = 0;
	collectct_51607(gch_49659);
	LOC1 = 0;
	LOC1 = rawalloc_36668(gch_49659.region, (NI)(size + ((NI)sizeof(Cell47306))));
	Cell47306* res = ((Cell47306*) (LOC1));
	(*res).typ = typ;
	(*res).refcount = ((NI) 8);
	result = celltousr_51223(res);
	zeroMem(result, ((NI) (size)));
	return result;
}

N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src) {
	NimStringDesc* result;
	result = 0;
	{
		void* LOC9;
		if (!!((src == NIM_NIL))) goto LA3;
{		NI s = (*src).len;
		{
			if (!(s < ((NI) 7))) goto LA7;
{			s = ((NI) 7);
}		}
		LA7: ;
		LOC9 = 0;
		LOC9 = newObjRC1((&strdesc_12203), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
		result = ((NimStringDesc*) (LOC9));
		(*result).reserved = s;
		(*result).len = (*src).len;
		memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
}	}
	LA3: ;
	return result;
}

static N_INLINE(void, nimGCunrefNoCycle)(void* p) {
	Cell47306* c = usrtocell_51241(p);
	{
		(*c).refcount -= ((NI) 8);
		if (!((NU64)((*c).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		rtladdzct_52801(c);
}	}
	LA3: ;
}

N_NOINLINE(NIM_BOOL, isobjslowpath_23534)(TNimType* obj, TNimType* subclass, TNimType** cache) {
	NIM_BOOL result;
{	result = 0;
	TNimType* x = (*obj).base;
	{
		while (1) {
			if (!!((x == subclass))) goto LA2;
			{
				if (!(x == NIM_NIL)) goto LA5;
{				cache[(((NI) 0))- 0] = obj;
				result = NIM_FALSE;
				goto BeforeRet;
}			}
			LA5: ;
			x = (*x).base;
		} LA2: ;
	}
	cache[(((NI) 1))- 0] = obj;
	result = NIM_TRUE;
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj, TNimType* subclass, TNimType** cache) {
	NIM_BOOL result;
{	result = 0;
	{
		if (!(obj == subclass)) goto LA3;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!((*obj).base == subclass)) goto LA7;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA7: ;
	{
		if (!(cache[(((NI) 0))- 0] == obj)) goto LA11;
{		result = NIM_FALSE;
		goto BeforeRet;
}	}
	LA11: ;
	{
		if (!(cache[(((NI) 1))- 0] == obj)) goto LA15;
{		result = NIM_TRUE;
		goto BeforeRet;
}	}
	LA15: ;
	result = isobjslowpath_23534(obj, subclass, cache);
	goto BeforeRet;
	}BeforeRet: ;
	return result;
}

static N_INLINE(void, quitordebug_20404)(void) {
	exit(((NI) 1));
}

static N_INLINE(void, incref_53619)(Cell47306* c) {
	(*c).refcount = (NI)((NU64)((*c).refcount) + (NU64)(((NI) 8)));
	{
		if (!canbecycleroot_51259(c)) goto LA3;
{		rtladdcycleroot_52020(c);
}	}
	LA3: ;
}

static N_INLINE(void, asgnRef)(void** dest, void* src) {
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		incref_53619(usrtocell_51241(src));
}	}
	LA3: ;
	{
		if (!!(((*dest) == NIM_NIL))) goto LA7;
{		decref_53201(usrtocell_51241((*dest)));
}	}
	LA7: ;
	(*dest) = src;
}

static N_INLINE(void, pushCurrentException)(Exception* e) {
	asgnRef((void**) (&(*e).parent), currexception_19439);
	asgnRef((void**) (&currexception_19439), e);
}

N_NIMCALL(void, raiseexceptionaux_20601)(Exception* e) {
{	{
		if (!!((localraisehook_10018 == NIM_NIL))) goto LA3;
{		{
			NIM_BOOL LOC7;
			LOC7 = 0;
			LOC7 = localraisehook_10018(e);
			if (!!(LOC7)) goto LA8;
{			goto BeforeRet;
}		}
		LA8: ;
}	}
	LA3: ;
	{
		if (!!((globalraisehook_10013 == NIM_NIL))) goto LA12;
{		{
			NIM_BOOL LOC16;
			LOC16 = 0;
			LOC16 = globalraisehook_10013(e);
			if (!!(LOC16)) goto LA17;
{			goto BeforeRet;
}		}
		LA17: ;
}	}
	LA12: ;
	{
		if (!(isObjWithCache((*e).m_type, (&NTI3650), Nim_OfCheck_CACHE1))) goto LA21;
{		showerrormessage_19406((*e).name);
		quitordebug_20404();
}	}
	goto LA19;
	LA21: ;
	{
		pushCurrentException(e);
		throw NimException(e, e->name);
	}
	LA19: ;
	}BeforeRet: ;
}

N_NIMCALL(void, raiseException)(Exception* e, NCSTRING ename) {
	(*e).name = ename;
	raiseexceptionaux_20601(e);
}

static N_INLINE(void, sysfatal_23663)(NimStringDesc* message) {
	Overflowerror3640* e;
	NimStringDesc* LOC1;
	e = 0;
	e = (Overflowerror3640*) newObj((&NTI23670), sizeof(Overflowerror3640));
	(*e).m_type = (&NTI3640);
	LOC1 = 0;
	LOC1 = (*e).message; (*e).message = copyStringRC1(message);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	raiseException((Exception*)e, "OverflowError");
}

N_NOINLINE(void, raiseOverflow)(void) {
	sysfatal_23663(((NimStringDesc*) &TMP41));
}

static N_INLINE(NI, addInt)(NI a, NI b) {
	NI result;
{	result = 0;
	result = (NI)((NU64)(a) + (NU64)(b));
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = (((NI) 0) <= (NI)(result ^ a));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result ^ b));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

N_NIMCALL(NI, mulInt)(NI a, NI b) {
	NI result;
	NF resasfloat;
	NF floatprod;
{	result = 0;
	resasfloat = 0;
	floatprod = 0;
	result = (NI)((NU64)(a) * (NU64)(b));
	floatprod = ((NF)(((double) (a))) * (NF)(((double) (b))));
	resasfloat = ((double) (result));
	{
		if (!(resasfloat == floatprod)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(((NF)(3.2000000000000000e+01) * (NF)((((NF)(resasfloat) - (NF)(floatprod)) > 0? (((NF)(resasfloat) - (NF)(floatprod))) : -(((NF)(resasfloat) - (NF)(floatprod)))))) <= (floatprod > 0? (floatprod) : -(floatprod)))) goto LA7;
{		goto BeforeRet;
}	}
	LA7: ;
	raiseOverflow();
	}BeforeRet: ;
	return result;
}

N_NIMCALL(void*, newSeq)(TNimType* typ, NI len) {
	void* result;
	result = 0;
	NI size = addInt(mulInt(len, (*(*typ).base).size), ((NI) 16));
	result = newObj(typ, size);
	(*((TGenericSeq*) (result))).len = len;
	(*((TGenericSeq*) (result))).reserved = len;
	return result;
}

N_NIMCALL(Graph159415*, newseq_159454)(NI len) {
	Graph159415* result;
	result = 0;
	result = (Graph159415*) newSeq((&NTI159415), len);
	return result;
}

N_NIMCALL(TY159416*, newseq_159436)(NI len) {
	TY159416* result;
	result = 0;
	result = (TY159416*) newSeq((&NTI159416), len);
	return result;
}

N_NOINLINE(NIM_BOOL, isonstack_51611)(void* p) {
	NIM_BOOL result;
	void* volatile stacktop;
	NIM_BOOL LOC1;
	result = 0;
	stacktop = 0;
	stacktop = ((void*) ((&stacktop)));
	NI b = ((NI) (gch_49659.stackbottom));
	NI a = ((NI) (stacktop));
	NI x = ((NI) (p));
	LOC1 = 0;
	LOC1 = ((NU64)(a) <= (NU64)(x));
	if (!(LOC1)) goto LA2;
	LOC1 = ((NU64)(x) <= (NU64)(b));
	LA2: ;
	result = LOC1;
	return result;
}

N_NIMCALL(void, unsureAsgnRef)(void** dest, void* src) {
	{
		NIM_BOOL LOC3;
		LOC3 = 0;
		LOC3 = isonstack_51611(((void*) (dest)));
		if (!!(LOC3)) goto LA4;
{		{
			if (!!((src == NIM_NIL))) goto LA8;
{			incref_53619(usrtocell_51241(src));
}		}
		LA8: ;
		{
			if (!((NU64)(((NI) 4096)) <= (NU64)(((NI) ((*dest)))))) goto LA12;
{			decref_53201(usrtocell_51241((*dest)));
}		}
		LA12: ;
}	}
	goto LA1;
	LA4: ;
	{
	}
	LA1: ;
	(*dest) = src;
}

N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src) {
	NimStringDesc* result;
	result = 0;
	{
		if (!!((src == NIM_NIL))) goto LA3;
{		{
			if (!!(((NI)((*src).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)))) goto LA7;
{			result = src;
}		}
		goto LA5;
		LA7: ;
		{
			result = rawNewStringNoInit((*src).len);
			(*result).len = (*src).len;
			memcpy(((NCSTRING) ((*result).data)), ((NCSTRING) ((*src).data)), (NI)((*src).len + ((NI) 1)));
		}
		LA5: ;
}	}
	LA3: ;
	return result;
}

N_NIMCALL(void, genericReset)(void* dest, TNimType* mt) {
	NI d = ((NI) (dest));
	switch ((*mt).kind) {
	case ((NU8) 28):
	case ((NU8) 22):
	case ((NU8) 24):
	{
		unsureAsgnRef(((void**) (dest)), NIM_NIL);
	}
	break;
	case ((NU8) 18):
	{
		genericresetaux_83001(dest, (*mt).node);
	}
	break;
	case ((NU8) 17):
	{
		genericresetaux_83001(dest, (*mt).node);
		TNimType** pint = ((TNimType**) (dest));
		(*pint) = NIM_NIL;
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_84412;
			NI HEX3Atmp_84436;
			i_84412 = 0;
			HEX3Atmp_84436 = 0;
			HEX3Atmp_84436 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
			NI res_84439 = ((NI) 0);
			{
				while (1) {
					if (!(res_84439 <= HEX3Atmp_84436)) goto LA7;
					i_84412 = res_84439;
					genericReset(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_84412) * (NU64)((*(*mt).base).size)))))), (*mt).base);
					res_84439 += ((NI) 1);
				} LA7: ;
			}
		}
	}
	break;
	default:
	{
		zeroMem(dest, ((NI) ((*mt).size)));
	}
	break;
	}
}

N_NIMCALL(void, genericresetaux_83001)(void* dest, TNimNode* n) {
	NI d = ((NI) (dest));
	switch ((*n).kind) {
	case ((NU8) 0):
	{
	}
	break;
	case ((NU8) 1):
	{
		genericReset(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), (*n).typ);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_84219;
			NI HEX3Atmp_84245;
			i_84219 = 0;
			HEX3Atmp_84245 = 0;
			HEX3Atmp_84245 = (NI)((*n).len - ((NI) 1));
			NI res_84248 = ((NI) 0);
			{
				while (1) {
					if (!(res_84248 <= HEX3Atmp_84245)) goto LA6;
					i_84219 = res_84248;
					genericresetaux_83001(dest, (*n).sons[(i_84219)- 0]);
					res_84248 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		TNimNode* m = selectbranch_27407(dest, n);
		{
			if (!!((m == NIM_NIL))) goto LA10;
{			genericresetaux_83001(dest, m);
}		}
		LA10: ;
		zeroMem(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((NI) ((*(*n).typ).size)));
	}
	break;
	}
}

N_NIMCALL(void, genericassignaux_83012)(void* dest, void* src, TNimNode* n, NIM_BOOL shallow) {
	NI d = ((NI) (dest));
	NI s = ((NI) (src));
	switch ((*n).kind) {
	case ((NU8) 1):
	{
		genericassignaux_83006(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), (*n).typ, shallow);
	}
	break;
	case ((NU8) 2):
	{
		{
			NI i_83048;
			NI HEX3Atmp_83206;
			i_83048 = 0;
			HEX3Atmp_83206 = 0;
			HEX3Atmp_83206 = (NI)((*n).len - ((NI) 1));
			NI res_83209 = ((NI) 0);
			{
				while (1) {
					if (!(res_83209 <= HEX3Atmp_83206)) goto LA5;
					i_83048 = res_83209;
					genericassignaux_83012(dest, src, (*n).sons[(i_83048)- 0], shallow);
					res_83209 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((NU8) 3):
	{
		TNimNode* dd = selectbranch_27407(dest, n);
		TNimNode* m = selectbranch_27407(src, n);
		{
			NIM_BOOL LOC9;
			LOC9 = 0;
			LOC9 = !((m == dd));
			if (!(LOC9)) goto LA10;
			LOC9 = !((dd == NIM_NIL));
			LA10: ;
			if (!LOC9) goto LA11;
{			genericresetaux_83001(dest, dd);
}		}
		LA11: ;
		memcpy(((void*) ((NI)((NU64)(d) + (NU64)((*n).offset)))), ((void*) ((NI)((NU64)(s) + (NU64)((*n).offset)))), ((NI) ((*(*n).typ).size)));
		{
			if (!!((m == NIM_NIL))) goto LA15;
{			genericassignaux_83012(dest, src, m, shallow);
}		}
		LA15: ;
	}
	break;
	case ((NU8) 0):
	{
	}
	break;
	}
}

N_NIMCALL(void, genericassignaux_83006)(void* dest, void* src, TNimType* mt, NIM_BOOL shallow) {
{	NI d = ((NI) (dest));
	NI s = ((NI) (src));
	switch ((*mt).kind) {
	case ((NU8) 28):
	{
		void** x = ((void**) (dest));
		void* s2 = (*((void**) (s)));
		{
			NIM_BOOL LOC4;
			NIM_BOOL LOC5;
			LOC4 = 0;
			LOC5 = 0;
			LOC5 = (s2 == NIM_NIL);
			if (LOC5) goto LA6;
			LOC5 = shallow;
			LA6: ;
			LOC4 = LOC5;
			if (LOC4) goto LA7;
			LOC4 = !(((NI)((*((TGenericSeq*) (s2))).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA7: ;
			if (!LOC4) goto LA8;
{			unsureAsgnRef(x, s2);
}		}
		goto LA2;
		LA8: ;
		{
			NimStringDesc* LOC11;
			LOC11 = 0;
			LOC11 = copyString(((NimStringDesc*) (s2)));
			unsureAsgnRef(x, ((void*) (LOC11)));
		}
		LA2: ;
	}
	break;
	case ((NU8) 24):
	{
		void* s2 = (*((void**) (src)));
		TGenericSeq* seq = ((TGenericSeq*) (s2));
		void** x = ((void**) (dest));
		{
			NIM_BOOL LOC15;
			NIM_BOOL LOC16;
			LOC15 = 0;
			LOC16 = 0;
			LOC16 = (s2 == NIM_NIL);
			if (LOC16) goto LA17;
			LOC16 = shallow;
			LA17: ;
			LOC15 = LOC16;
			if (LOC15) goto LA18;
			LOC15 = !(((NI)((*seq).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA18: ;
			if (!LOC15) goto LA19;
{			unsureAsgnRef(x, s2);
			goto BeforeRet;
}		}
		LA19: ;
		unsureAsgnRef(x, newSeq(mt, (*seq).len));
		NI dst = ((NI) ((*((void**) (dest)))));
		{
			NI i_83611;
			NI HEX3Atmp_83741;
			i_83611 = 0;
			HEX3Atmp_83741 = 0;
			HEX3Atmp_83741 = (NI)((*seq).len - ((NI) 1));
			NI res_83744 = ((NI) 0);
			{
				while (1) {
					if (!(res_83744 <= HEX3Atmp_83741)) goto LA23;
					i_83611 = res_83744;
					genericassignaux_83006(((void*) ((NI)((NU64)((NI)((NU64)(dst) + (NU64)((NI)((NU64)(i_83611) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), ((void*) ((NI)((NU64)((NI)((NU64)(((NI) (s2))) + (NU64)((NI)((NU64)(i_83611) * (NU64)((*(*mt).base).size))))) + (NU64)(((NI) 16))))), (*mt).base, shallow);
					res_83744 += ((NI) 1);
				} LA23: ;
			}
		}
	}
	break;
	case ((NU8) 17):
	{
		{
			if (!!(((*mt).base == NIM_NIL))) goto LA27;
{			genericassignaux_83006(dest, src, (*mt).base, shallow);
}		}
		LA27: ;
		genericassignaux_83012(dest, src, (*mt).node, shallow);
		TNimType** pint = ((TNimType**) (dest));
		(*pint) = mt;
	}
	break;
	case ((NU8) 18):
	{
		genericassignaux_83012(dest, src, (*mt).node, shallow);
	}
	break;
	case ((NU8) 16):
	case ((NU8) 4):
	{
		{
			NI i_83689;
			NI HEX3Atmp_83752;
			i_83689 = 0;
			HEX3Atmp_83752 = 0;
			HEX3Atmp_83752 = (NI)((NI)((*mt).size / (*(*mt).base).size) - ((NI) 1));
			NI res_83755 = ((NI) 0);
			{
				while (1) {
					if (!(res_83755 <= HEX3Atmp_83752)) goto LA33;
					i_83689 = res_83755;
					genericassignaux_83006(((void*) ((NI)((NU64)(d) + (NU64)((NI)((NU64)(i_83689) * (NU64)((*(*mt).base).size)))))), ((void*) ((NI)((NU64)(s) + (NU64)((NI)((NU64)(i_83689) * (NU64)((*(*mt).base).size)))))), (*mt).base, shallow);
					res_83755 += ((NI) 1);
				} LA33: ;
			}
		}
	}
	break;
	case ((NU8) 22):
	{
		unsureAsgnRef(((void**) (dest)), (*((void**) (s))));
	}
	break;
	default:
	{
		memcpy(dest, src, ((NI) ((*mt).size)));
	}
	break;
	}
	}BeforeRet: ;
}

N_NIMCALL(void, genericAssign)(void* dest, void* src, TNimType* mt) {
	genericassignaux_83006(dest, src, mt, NIM_FALSE);
}

N_NIMCALL(void, genericSeqAssign)(void* dest, void* src_83804, TNimType* mt) {
	void* src = src_83804;
	genericAssign(dest, ((void*) ((&src))), mt);
}

static N_INLINE(NI, resize_79001)(NI old) {
	NI result;
	result = 0;
	{
		if (!(old <= ((NI) 0))) goto LA3;
{		result = ((NI) 4);
}	}
	goto LA1;
	LA3: ;
	{
		if (!(old < ((NI) 65536))) goto LA6;
{		result = (NI)(old * ((NI) 2));
}	}
	goto LA1;
	LA6: ;
	{
		result = (NI)((NI)(old * ((NI) 3)) / ((NI) 2));
	}
	LA1: ;
	return result;
}

N_NIMCALL(void*, growobj_63203)(void* old, NI newsize, Gcheap49618& gch) {
	void* result;
	void* LOC1;
	result = 0;
	collectct_51607(gch);
	Cell47306* ol = usrtocell_51241(old);
	LOC1 = 0;
	LOC1 = rawalloc_36668(gch.region, (NI)(newsize + ((NI)sizeof(Cell47306))));
	Cell47306* res = ((Cell47306*) (LOC1));
	NI elemsize = ((NI) 1);
	{
		if (!!(((*(*ol).typ).kind == ((NU8) 28)))) goto LA4;
{		elemsize = (*(*(*ol).typ).base).size;
}	}
	LA4: ;
	NI oldsize = (NI)((NI)((*((TGenericSeq*) (old))).len * elemsize) + ((NI) 16));
	memcpy(((void*) (res)), ((void*) (ol)), ((NI) ((NI)(oldsize + ((NI)sizeof(Cell47306))))));
	zeroMem(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (res))) + (NU64)(oldsize))) + (NU64)(((NI)sizeof(Cell47306)))))), ((NI) ((NI)(newsize - oldsize))));
	{
		if (!((NU64)((NI)((NU64)((*ol).refcount) >> (NU64)(((NI) 3)))) <= (NU64)(((NI) 1)))) goto LA8;
{		{
			if (!!(((NI)((*ol).refcount & ((NI) 4)) == ((NI) 0)))) goto LA12;
{			NI j = (NI)(gch.zct.len - ((NI) 1));
			Cell47306** d = gch.zct.d;
			{
				while (1) {
					if (!(((NI) 0) <= j)) goto LA15;
					{
						if (!(d[(j)- 0] == ol)) goto LA18;
{						d[(j)- 0] = res;
						goto LA14;
}					}
					LA18: ;
					j -= ((NI) 1);
				} LA15: ;
			} LA14: ;
}		}
		LA12: ;
		{
			if (!canbecycleroot_51259(ol)) goto LA22;
{			excl_48075(gch.cycleroots, ol);
}		}
		LA22: ;
		rawdealloc_43018(gch.region, ((void*) (ol)));
}	}
	goto LA6;
	LA8: ;
	{
		(*res).refcount = ((NI) 8);
		decref_53201(ol);
	}
	LA6: ;
	result = celltousr_51223(res);
	return result;
}

N_NIMCALL(void*, growobj_66009)(void* old, NI newsize) {
	void* result;
	result = 0;
	result = growobj_63203(old, newsize, gch_49659);
	return result;
}

N_NIMCALL(TGenericSeq*, incrSeqV2)(TGenericSeq* seq, NI elemsize) {
	TGenericSeq* result;
	result = 0;
	result = seq;
	{
		void* LOC5;
		if (!((NI)((*result).reserved & ((NI) IL64(9223372036854775807))) <= (*result).len)) goto LA3;
{		(*result).reserved = resize_79001((NI)((*result).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = 0;
		LOC5 = growobj_66009(((void*) (result)), (NI)((NI)(elemsize * (*result).reserved) + ((NI) 16)));
		result = ((TGenericSeq*) (LOC5));
}	}
	LA3: ;
	return result;
}

N_NIMCALL(TY159201*, newseq_159664)(NI len) {
	TY159201* result;
	result = 0;
	result = (TY159201*) newSeq((&NTI159201), len);
	return result;
}

N_NIMCALL(void, genericShallowAssign)(void* dest, void* src, TNimType* mt) {
	genericassignaux_83006(dest, src, mt, NIM_TRUE);
}

N_NIMCALL(NimStringDesc*, rawNewString)(NI space) {
	NimStringDesc* result;
	void* LOC5;
	result = 0;
	NI s = space;
	{
		if (!(s < ((NI) 7))) goto LA3;
{		s = ((NI) 7);
}	}
	LA3: ;
	LOC5 = 0;
	LOC5 = newObj((&strdesc_12203), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s) + ((NI) 1)));
	result = ((NimStringDesc*) (LOC5));
	(*result).reserved = s;
	return result;
}

N_NIMCALL(NimStringDesc*, mnewString)(NI len) {
	NimStringDesc* result;
	result = 0;
	result = rawNewString(len);
	(*result).len = len;
	return result;
}

N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest, NI addlen) {
	NimStringDesc* result;
	result = 0;
	{
		if (!((NI)((*dest).len + addlen) <= (NI)((*dest).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result = dest;
}	}
	goto LA1;
	LA3: ;
	{
		NI LOC6;
		void* LOC7;
		LOC6 = 0;
		LOC6 = resize_79001((NI)((*dest).reserved & ((NI) IL64(9223372036854775807))));
		NI sp = ((LOC6 >= (NI)((*dest).len + addlen)) ? LOC6 : (NI)((*dest).len + addlen));
		LOC7 = 0;
		LOC7 = growobj_66009(((void*) (dest)), (NI)((NI)(((NI)sizeof(TGenericSeq)) + sp) + ((NI) 1)));
		result = ((NimStringDesc*) (LOC7));
		(*result).reserved = sp;
	}
	LA1: ;
	return result;
}

N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s, NI newlen) {
	NimStringDesc* result;
	result = 0;
	NI n = ((newlen >= ((NI) 0)) ? newlen : ((NI) 0));
	{
		if (!(n <= (NI)((*s).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result = s;
}	}
	goto LA1;
	LA3: ;
	{
		result = resizeString(s, n);
	}
	LA1: ;
	(*result).len = n;
	(*result).data[(n)- 0] = 0;
	return result;
}

N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x) {
	NimStringDesc* result;
	result = 0;
	result = mnewString(((NI) 32));
	NI i = ((NI) 0);
	NI y = x;
	{
		while (1) {
			NI d = (NI)(y / ((NI) 10));
			result->data[i] = ((NIM_CHAR) (((NI) ((NI)(((NI)(y - (NI)(d * ((NI) 10))) > 0? ((NI)(y - (NI)(d * ((NI) 10)))) : -((NI)(y - (NI)(d * ((NI) 10))))) + ((NI) 48))))));
			i += ((NI) 1);
			y = d;
			{
				if (!(y == ((NI) 0))) goto LA5;
{				goto LA1;
}			}
			LA5: ;
		}
	} LA1: ;
	{
		if (!(x < ((NI) 0))) goto LA9;
{		result->data[i] = 45;
		i += ((NI) 1);
}	}
	LA9: ;
	result = setLengthStr(result, ((NI) (i)));
	{
		NI j_80339;
		NI HEX3Atmp_80353;
		j_80339 = 0;
		HEX3Atmp_80353 = 0;
		HEX3Atmp_80353 = (NI)((NI)(i / ((NI) 2)) - ((NI) 1));
		NI res_80356 = ((NI) 0);
		{
			while (1) {
				NIM_CHAR LOC14;
				if (!(res_80356 <= HEX3Atmp_80353)) goto LA13;
				j_80339 = res_80356;
				LOC14 = 0;
				LOC14 = result->data[j_80339];
				result->data[j_80339] = result->data[(NI)((NI)(i - j_80339) - ((NI) 1))];
				result->data[(NI)((NI)(i - j_80339) - ((NI) 1))] = LOC14;
				res_80356 += ((NI) 1);
			} LA13: ;
		}
	}
	return result;
}
NIM_EXTERNC N_NOINLINE(void, systemInit000)(void) {
	TNimType LOC1;
	nimvm_5751 = NIM_FALSE;
	memset((void*)(&LOC1), 0, sizeof(LOC1));
	LOC1.size = ((NI) 8);
	LOC1.kind = ((NU8) 28);
	LOC1.flags = 2;
	strdesc_12203 = LOC1;
	initallocator_11601();
	initStackBottom();
	initgc_11401();
	registersignalhandler_22802();
}

NIM_EXTERNC N_NOINLINE(void, systemDatInit000)(void) {
static TNimNode* TMP38[4];
static TNimNode TMP0[10];
NTI104.size = sizeof(NI);
NTI104.kind = 31;
NTI104.base = 0;
NTI104.flags = 3;
NTI3608.size = sizeof(TNimObject);
NTI3608.kind = 17;
NTI3608.base = 0;
NTI3608.flags = 1;
TMP0[0].len = 0; TMP0[0].kind = 2;
NTI3608.node = &TMP0[0];
NTI3624.size = sizeof(Exception);
NTI3624.kind = 17;
NTI3624.base = (&NTI3608);
TMP38[0] = &TMP0[2];
NTI10010.size = sizeof(Exception*);
NTI10010.kind = 22;
NTI10010.base = (&NTI3624);
NTI10010.marker = TMP39;
TMP0[2].kind = 1;
TMP0[2].offset = offsetof(Exception, parent);
TMP0[2].typ = (&NTI10010);
TMP0[2].name = "parent";
TMP38[1] = &TMP0[3];
NTI140.size = sizeof(NCSTRING);
NTI140.kind = 29;
NTI140.base = 0;
NTI140.flags = 3;
TMP0[3].kind = 1;
TMP0[3].offset = offsetof(Exception, name);
TMP0[3].typ = (&NTI140);
TMP0[3].name = "name";
TMP38[2] = &TMP0[4];
NTI138.size = sizeof(NimStringDesc*);
NTI138.kind = 28;
NTI138.base = 0;
NTI138.flags = 2;
TMP0[4].kind = 1;
TMP0[4].offset = offsetof(Exception, message);
TMP0[4].typ = (&NTI138);
TMP0[4].name = "msg";
TMP38[3] = &TMP0[5];
TMP0[5].kind = 1;
TMP0[5].offset = offsetof(Exception, trace);
TMP0[5].typ = (&NTI138);
TMP0[5].name = "trace";
TMP0[1].len = 4; TMP0[1].kind = 2; TMP0[1].sons = &TMP38[0];
NTI3624.node = &TMP0[1];
NTI3636.size = sizeof(Arithmeticerror3636);
NTI3636.kind = 17;
NTI3636.base = (&NTI3624);
TMP0[6].len = 0; TMP0[6].kind = 2;
NTI3636.node = &TMP0[6];
NTI3640.size = sizeof(Overflowerror3640);
NTI3640.kind = 17;
NTI3640.base = (&NTI3636);
TMP0[7].len = 0; TMP0[7].kind = 2;
NTI3640.node = &TMP0[7];
NTI23670.size = sizeof(Overflowerror3640*);
NTI23670.kind = 22;
NTI23670.base = (&NTI3640);
NTI23670.marker = TMP40;
NTI3626.size = sizeof(Systemerror3626);
NTI3626.kind = 17;
NTI3626.base = (&NTI3624);
TMP0[8].len = 0; TMP0[8].kind = 2;
NTI3626.node = &TMP0[8];
NTI3650.size = sizeof(Outofmemerror3650);
NTI3650.kind = 17;
NTI3650.base = (&NTI3626);
TMP0[9].len = 0; TMP0[9].kind = 2;
NTI3650.node = &TMP0[9];
}

